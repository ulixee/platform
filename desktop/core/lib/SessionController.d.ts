import ISourceCodeLocation from '@ulixee/commons/interfaces/ISourceCodeLocation';
import { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';
import { IChromeAliveSessionApis } from '@ulixee/desktop-interfaces/apis';
import IChromeAliveSessionApi, { ISessionResumeArgs } from '@ulixee/desktop-interfaces/apis/IChromeAliveSessionApi';
import IChromeAliveSessionEvents from '@ulixee/desktop-interfaces/events/IChromeAliveSessionEvents';
import IDatastoreOutputEvent from '@ulixee/desktop-interfaces/events/IDatastoreOutputEvent';
import IHeroSessionUpdatedEvent from '@ulixee/desktop-interfaces/events/IHeroSessionUpdatedEvent';
import ISessionAppModeEvent from '@ulixee/desktop-interfaces/events/ISessionAppModeEvent';
import IDatastoreCollectedAssets from '@ulixee/desktop-interfaces/IDatastoreCollectedAssets';
import { ISelectorMap } from '@ulixee/desktop-interfaces/ISelectorMap';
import { Session as HeroSession, Tab } from '@ulixee/hero-core';
import SessionDb from '@ulixee/hero-core/dbs/SessionDb';
import IScriptInvocationMeta from '@ulixee/hero-interfaces/IScriptInvocationMeta';
import ISessionCreateOptions from '@ulixee/hero-interfaces/ISessionCreateOptions';
import ISourceCodeReference from '@ulixee/hero-interfaces/ISourceCodeReference';
import MirrorPage from '@ulixee/hero-timetravel/lib/MirrorPage';
import TimetravelPlayer from '@ulixee/hero-timetravel/player/TimetravelPlayer';
import { ITabDetails } from '@ulixee/hero-timetravel/player/TimetravelTicks';
import IConnectionToClient from '@ulixee/net/interfaces/IConnectionToClient';
import ITransport from '@ulixee/net/interfaces/ITransport';
import { IncomingMessage } from 'http';
import DevtoolsBackdoorModule from './app-extension-modules/DevtoolsBackdoorModule';
import ElementsModule from './app-extension-modules/ElementsModule';
import AppDevtoolsConnection from './AppDevtoolsConnection';
import ChromeAliveWindowController from './ChromeAliveWindowController';
import SourceCodeTimeline from './SourceCodeTimeline';
type TConnectionToChromeAliveSessionClient = IConnectionToClient<IChromeAliveSessionApis, IChromeAliveSessionEvents>;
export default class SessionController extends TypedEventEmitter<{
    closed: void;
}> {
    private readonly db;
    private readonly options;
    private readonly datastoresDir;
    mode: ISessionAppModeEvent['mode'];
    playbackState: IHeroSessionUpdatedEvent['playbackState'];
    readonly timetravelPlayer: TimetravelPlayer;
    readonly scriptInvocationMeta: IScriptInvocationMeta;
    readonly sourceCodeTimeline: SourceCodeTimeline;
    readonly mirrorPagesByTabId: {
        [tabId: number]: MirrorPage;
    };
    readonly worldHeroSessionIds: Set<string>;
    get devtoolsBackdoorModule(): DevtoolsBackdoorModule;
    get elementsModule(): ElementsModule;
    mirrorPagePauseRefreshing: boolean;
    chromeAliveWindowController: ChromeAliveWindowController;
    replayTransport: ITransport;
    private selectorRecommendations;
    private timelineWatch;
    private outputRebuilder;
    private readonly lastDomChangesByTabId;
    private mirrorRefreshLastUpdated;
    private mirrorRefreshTimeout;
    private lastTimelineMetadata;
    private readonly resourcesWatch;
    private isSearchingTimetravel;
    private restartingSessionId;
    private readonly scriptEntrypointTs;
    private scriptLastModifiedTime;
    private hasScriptUpdatesSinceLastRun;
    private watchHandle;
    private readonly inputBytes;
    private readonly sessionId;
    private liveSession;
    private connections;
    private readonly apiHandlers;
    private readonly logger;
    private events;
    private onFirstTab;
    constructor(db: SessionDb, options: ISessionCreateOptions, datastoresDir: string, devtoolsConnection: AppDevtoolsConnection);
    bindLiveSession(heroSession: HeroSession): void;
    loadTimelineTicks(): ITabDetails[];
    loadFromDb(): Promise<void>;
    setResuming(newSessionId: any): void;
    addConnection(transport: ITransport, request: IncomingMessage): TConnectionToChromeAliveSessionClient;
    getMirrorPage(tabId: number): Promise<MirrorPage>;
    onMultiverseSession(session: HeroSession): void;
    bindExtractor(extractorSession: HeroSession): void;
    relaunchSession(startLocation: 'sessionStart' | 'extraction'): Error | undefined;
    toHeroSessionEvent(): IHeroSessionUpdatedEvent;
    getSourceCodeAtCommandId(commandId: number): (ISourceCodeLocation & {
        code: string;
    })[];
    addSourceCodeLocation(record: {
        commandId: number;
    } & ISourceCodeReference): void;
    onCollectedAsset(event: HeroSession['EventTypes']['collected-asset']): void;
    onTabCreated(event: HeroSession['EventTypes']['tab-created']): void;
    addReplayTab(tabId: number, mirrorPage: MirrorPage): Promise<void>;
    sendDomRecordingUpdates(tab: Tab, events: Tab['EventTypes']['page-events']): void;
    refreshLiveMirrorPage(tabId: number, force?: boolean): Promise<void>;
    getDomRecording(tabId?: number): ReturnType<IChromeAliveSessionApi['getDom']>;
    getScreenshot(): {
        imageBase64: string;
    };
    load(): ReturnType<IChromeAliveSessionApi['load']>;
    close(): Promise<void>;
    onReplayTargetCreated(args?: Parameters<IChromeAliveSessionApi['replayTargetCreated']>[0]): ReturnType<IChromeAliveSessionApi['replayTargetCreated']>;
    onDevtoolsTargetOpened(args?: Parameters<IChromeAliveSessionApi['devtoolsTargetOpened']>[0]): ReturnType<IChromeAliveSessionApi['devtoolsTargetOpened']>;
    getScriptState(): ReturnType<IChromeAliveSessionApi['getScriptState']>;
    getDom(args?: Parameters<IChromeAliveSessionApi['getDom']>[0]): ReturnType<IChromeAliveSessionApi['getDom']>;
    getMeta(): ReturnType<IChromeAliveSessionApi['getMeta']>;
    getTimetravelState(): ReturnType<IChromeAliveSessionApi['getTimetravelState']>;
    timetravel(args: Parameters<IChromeAliveSessionApi['timetravel']>[0]): Promise<{
        timelineOffsetPercent: number;
    }>;
    openMode(args: Parameters<IChromeAliveSessionApi['openMode']>[0]): Promise<void>;
    pause(): void;
    resume(args: ISessionResumeArgs): Promise<{
        success: boolean;
        error?: Error;
    }>;
    searchResources(args?: Parameters<IChromeAliveSessionApi['searchResources']>[0]): ReturnType<IChromeAliveSessionApi['searchResources']>;
    searchDom(args?: Parameters<IChromeAliveSessionApi['searchDom']>[0]): ReturnType<IChromeAliveSessionApi['searchDom']>;
    getResourceDetails(id: number): ReturnType<IChromeAliveSessionApis['Session.getResourceDetails']>;
    getResources(): ReturnType<IChromeAliveSessionApis['Session.getResources']>;
    getCollectedAssets(): Promise<IDatastoreCollectedAssets>;
    getDatastoreOutput(): IDatastoreOutputEvent;
    rerunExtractor(): Promise<{
        success: boolean;
        error?: Error;
    }>;
    toggleInspectElementMode(): Promise<void>;
    highlightNode(id: {
        backendNodeId?: number;
        objectId?: string;
    }): Promise<void>;
    hideHighlight(): Promise<void>;
    generateQuerySelector(id: {
        backendNodeId?: number;
        objectId?: string;
    }): Promise<ISelectorMap>;
    private onTabResource;
    private onScriptEntrypointUpdated;
    private onHeroSessionResumed;
    private onCommandStarted;
    private onCommandsPaused;
    private onCommandsResumed;
    private onHeroSessionClosed;
    private onHeroSessionKeptAlive;
    private resetExtraction;
    private onOutputUpdated;
    private sendCommandFocusedEvent;
    private sendTimetravelOffset;
    private sendPaintIndexEvent;
    private sendActiveSession;
    private sendDatastoreUpdatedEvent;
    private sendDatastoreCollectedAssetsEvent;
    private sendAppModeEvent;
    private sendApiEvent;
}
export {};
