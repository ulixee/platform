import DatastoreCore from '@ulixee/datastore-core';
import { IChromeAliveSessionApis, IDesktopAppApis } from '@ulixee/desktop-interfaces/apis';
import IAppApi from '@ulixee/desktop-interfaces/apis/IAppApi';
import IChromeAliveSessionEvents from '@ulixee/desktop-interfaces/events/IChromeAliveSessionEvents';
import IDesktopAppEvents from '@ulixee/desktop-interfaces/events/IDesktopAppEvents';
import HeroCore from '@ulixee/hero-core';
import { ConnectionToCore } from '@ulixee/net';
import IConnectionToClient from '@ulixee/net/interfaces/IConnectionToClient';
import ITransport from '@ulixee/net/interfaces/ITransport';
import { ICloudApis } from '@ulixee/platform-specification/cloud';
import { IncomingMessage } from 'http';
import WebSocket = require('ws');
import SessionController from './lib/SessionController';
export default class DesktopCore {
    datastoreCore: DatastoreCore;
    heroCore: HeroCore;
    sessionControllersById: Map<string, SessionController>;
    private appConnectionsById;
    private appDevtoolsConnectionsById;
    private readonly heroSessionsSearch;
    private _connectionToDatastoreCore;
    private get connectionToDatastoreCore();
    private events;
    private connectionToCloudCore;
    constructor(datastoreCore: DatastoreCore, heroCore: HeroCore);
    bindConnection(connectionToCloudCore: ConnectionToCore<ICloudApis, {}>): void;
    disconnect(): void;
    registerWsRoutes(addWsRoute: (route: string | RegExp, callbackFn: IWsHandleFn, useTransport?: boolean) => any): void;
    addAppDevtoolsWebsocket(ws: WebSocket, request: IncomingMessage): void;
    addChromeAliveConnection(transport: ITransport, request: IncomingMessage): Promise<IConnectionToClient<IChromeAliveSessionApis, IChromeAliveSessionEvents>>;
    addDesktopConnection(transport: ITransport, request: IncomingMessage): IConnectionToClient<IDesktopAppApis, IDesktopAppEvents>;
    activatePlugin(): void;
    onAppConnect(id: string, args: Parameters<IAppApi['connect']>[0]): ReturnType<IAppApi['connect']>;
    shutdown(): Promise<void>;
    private onHeroSessionCreated;
    private createSessionController;
    private delegateToDatastoreCore;
    private getDatastoreMetaWithExamples;
    private delegateToCloudCore;
    private loadSessionController;
    private broadcastAppEvent;
}
type IWsHandleFn = (wsOrTransport: WebSocket | ITransport, request: IncomingMessage, params: string[]) => void;
export {};
