import { IExpr, ISelectStatement, IStatement, IInsertStatement, IUpdateStatement, IDeleteStatement, ISelectedColumn, IInterval, IBinaryOperator, IExprBinary, IName, IExprInteger, FromTable, IQName } from '../interfaces/ISqlNode';
export declare function checkSelect(value: string | string[], expected: ISelectStatement): void;
export declare function checkInsert(value: string | string[], expected: IInsertStatement): void;
export declare function checkInsertLoc(value: string | string[], expected: IInsertStatement): void;
export declare function checkDelete(value: string | string[], expected: IDeleteStatement): void;
export declare function checkUpdate(value: string | string[], expected: IUpdateStatement): void;
export declare function checkStatement(value: string | string[], expected: IStatement): void;
export declare function checkInvalid(sql: string, start?: string): void;
export declare function checkValid(sql: string, start?: string): void;
export declare function checkInvalidExpr(sql: string): void;
export declare function checkTreeExpr(value: string | string[], expected: IExpr): void;
export declare function checkTreeExprLoc(value: string | string[], expected: IExpr): void;
export declare function columns(...vals: (IExpr | string)[]): ISelectedColumn[];
export declare function checkInterval(input: string | string[], expected: IInterval): void;
export declare const star: IExpr;
export declare const starCol: ISelectedColumn;
export declare function col(n: string, alias?: string): ISelectedColumn;
export declare function ref(n: string): IExpr;
export declare function binary(left: IExpr, op: IBinaryOperator, right: IExpr): IExprBinary;
export declare function name(n: string): IName;
export declare function qname(n: string, schema?: string): IQName;
export declare function int(value: number): IExprInteger;
export declare function tbl(nm: string): FromTable;
