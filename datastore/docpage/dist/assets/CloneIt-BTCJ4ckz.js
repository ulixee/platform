import{d as m,_ as u,N as g,a as f,s as x,g as C,b as v,c as N,e as a,f as t,h as o,t as n,w as i,F as b,r as l,o as w}from"./index-B0O9LZjQ.js";const y=m({components:{Prism:u,Navbar:g},async setup(){const e=await f,{ipAddress:s,port:d}=await x;return{config:e,ipAddress:s,port:d,authString:C()}}}),A={class:"Free Credits my-12 px-20"},E={class:"rounded border bg-white p-10 shadow"},O={class:"text-center"},D={class:"text-2xl"};function P(e,s,d,S,T,$){const p=l("Navbar"),r=l("Prism");return w(),N(b,null,[a(p),s[13]||(s[13]=t()),o("div",A,[o("div",E,[o("h1",O,[o("div",D,n(e.config.name.toUpperCase())+" DATASTORE",1),s[0]||(s[0]=t()),s[1]||(s[1]=o("div",{class:"text-8xl"},"CLONE IT",-1))]),s[4]||(s[4]=t()),s[5]||(s[5]=o("p",{class:"mt-5"},`
        You can clone this datastore to your local machine with a few simple commands:
      `,-1)),s[6]||(s[6]=t()),a(r,{language:"bash"},{default:i(()=>[t(`
        npx @ulixee/datastore clone 'ulx://`+n(e.ipAddress)+":"+n(e.port)+"/"+n(e.config.datastoreId)+"@v"+n(e.config.version)+`'
      `,1)]),_:1}),s[7]||(s[7]=t()),s[8]||(s[8]=o("p",{class:"mt-5"},"That's It. Now you can run it...",-1)),s[9]||(s[9]=t()),a(r,{language:"bash"},{default:i(()=>s[2]||(s[2]=[t(" npx @ulixee/datastore start ./datastore.ts ")])),_:1}),s[10]||(s[10]=t()),s[11]||(s[11]=o("p",{class:"mt-5"},"Or package and deploy it...",-1)),s[12]||(s[12]=t()),a(r,{language:"bash"},{default:i(()=>s[3]||(s[3]=[t(`
        npx @ulixee/datastore deploy ./datastore.ts -u CLOUD_NODE_YOU_HAVE_ACCESS
      `)])),_:1})])])],64)}const V=v(y,[["render",P]]);export{V as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvbmVJdC1CVENKNGNrei5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZGF0YXN0b3JlL2RvY3BhZ2Uvc3JjL3BhZ2VzL0Nsb25lSXQudnVlIl0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPE5hdmJhciAvPlxuICA8ZGl2IGNsYXNzPVwiRnJlZSBDcmVkaXRzIG15LTEyIHB4LTIwXCI+XG4gICAgPGRpdiBjbGFzcz1cInJvdW5kZWQgYm9yZGVyIGJnLXdoaXRlIHAtMTAgc2hhZG93XCI+XG4gICAgICA8aDEgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC0yeGxcIj57eyBjb25maWcubmFtZS50b1VwcGVyQ2FzZSgpIH19IERBVEFTVE9SRTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC04eGxcIj5DTE9ORSBJVDwvZGl2PlxuICAgICAgPC9oMT5cblxuICAgICAgPHAgY2xhc3M9XCJtdC01XCI+XG4gICAgICAgIFlvdSBjYW4gY2xvbmUgdGhpcyBkYXRhc3RvcmUgdG8geW91ciBsb2NhbCBtYWNoaW5lIHdpdGggYSBmZXcgc2ltcGxlIGNvbW1hbmRzOlxuICAgICAgPC9wPlxuXG4gICAgICA8UHJpc20gbGFuZ3VhZ2U9XCJiYXNoXCI+XG4gICAgICAgIG5weCBAdWxpeGVlL2RhdGFzdG9yZSBjbG9uZSAndWx4Oi8ve3sgaXBBZGRyZXNzIH19Ont7IHBvcnQgfX0ve3tjb25maWcuZGF0YXN0b3JlSWR9fUB2e3sgY29uZmlnLnZlcnNpb24gfX0nXG4gICAgICA8L1ByaXNtPlxuXG4gICAgICA8cCBjbGFzcz1cIm10LTVcIj5UaGF0J3MgSXQuIE5vdyB5b3UgY2FuIHJ1biBpdC4uLjwvcD5cbiAgICAgIDxQcmlzbSBsYW5ndWFnZT1cImJhc2hcIj4gbnB4IEB1bGl4ZWUvZGF0YXN0b3JlIHN0YXJ0IC4vZGF0YXN0b3JlLnRzIDwvUHJpc20+XG5cbiAgICAgIDxwIGNsYXNzPVwibXQtNVwiPk9yIHBhY2thZ2UgYW5kIGRlcGxveSBpdC4uLjwvcD5cbiAgICAgIDxQcmlzbSBsYW5ndWFnZT1cImJhc2hcIj5cbiAgICAgICAgbnB4IEB1bGl4ZWUvZGF0YXN0b3JlIGRlcGxveSAuL2RhdGFzdG9yZS50cyAtdSBDTE9VRF9OT0RFX1lPVV9IQVZFX0FDQ0VTU1xuICAgICAgPC9QcmlzbT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgZ2V0Q3JlZGl0IH0gZnJvbSAnQC9saWIvVXRpbHMnO1xuaW1wb3J0ICogYXMgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgUHJpc20gZnJvbSAnLi4vY29tcG9uZW50cy9QcmlzbS52dWUnO1xuaW1wb3J0IE5hdmJhciBmcm9tICcuLi9sYXlvdXRzL05hdmJhci52dWUnO1xuaW1wb3J0IHsgZG9jcGFnZUNvbmZpZ1Byb21pc2UsIHNlcnZlckRldGFpbHNQcm9taXNlIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZS5kZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gICAgUHJpc20sXG4gICAgTmF2YmFyLFxuICB9LFxuICBhc3luYyBzZXR1cCgpIHtcbiAgICBjb25zdCBjb25maWcgPSBhd2FpdCBkb2NwYWdlQ29uZmlnUHJvbWlzZTtcbiAgICBjb25zdCB7IGlwQWRkcmVzcywgcG9ydCB9ID0gYXdhaXQgc2VydmVyRGV0YWlsc1Byb21pc2U7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlnLFxuICAgICAgaXBBZGRyZXNzLFxuICAgICAgcG9ydCxcbiAgICAgIGF1dGhTdHJpbmc6IGdldENyZWRpdCgpLFxuICAgIH07XG4gIH0sXG59KTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbi5JbmRleCB7XG4gIHNlY3Rpb24ge1xuICAgIEBhcHBseSBtdC0xMDtcbiAgfVxufVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6WyJfc2ZjX21haW4iLCJWdWUiLCJjb21wb25lbnRzIiwiUHJpc20iLCJOYXZiYXIiLCJzZXR1cCIsImNvbmZpZyIsImRvY3BhZ2VDb25maWdQcm9taXNlIiwiaXBBZGRyZXNzIiwicG9ydCIsInNlcnZlckRldGFpbHNQcm9taXNlIiwiYXV0aFN0cmluZyIsImdldENyZWRpdCIsIl9ob2lzdGVkXzEiLCJjbGFzcyIsIl9ob2lzdGVkXzIiLCJfY29tcG9uZW50X1ByaXNtIiwiX3Jlc29sdmVDb21wb25lbnQiLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9GcmFnbWVudCIsIl9jcmVhdGVWTm9kZSIsIl9jb21wb25lbnRfTmF2YmFyIiwiX2NhY2hlIiwiX2NyZWF0ZVRleHRWTm9kZSIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl90b0Rpc3BsYXlTdHJpbmciLCJfY3R4IiwibmFtZSIsInRvVXBwZXJDYXNlIiwibGFuZ3VhZ2UiLCJkZWZhdWx0IiwiX3dpdGhDdHgiLCJkYXRhc3RvcmVJZCIsInZlcnNpb24iXSwibWFwcGluZ3MiOiJpSkFtQ0EsTUFBQUEsRUFBZUMsRUFBb0IsQ0FDakNDLFdBQVksT0FDVkMsRUFDQUMsT0FBQUEsQ0FDRixFQUNBLE1BQU1DLE9BQVEsQ0FDWixNQUFNQyxFQUFTLE1BQU1DLEVBQ2YsQ0FBRUMsVUFBQUEsRUFBV0MsS0FBQUEsQ0FBSyxFQUFJLE1BQU1DLEVBRTNCLE1BQUEsQ0FDTEosT0FBQUEsRUFDQUUsVUFBQUEsRUFDQUMsS0FBQUEsRUFDQUUsV0FBWUMsRUFBVSxFQUUxQixDQUNGLENBQUMsRUEvQ1NDLEVBQUEsQ0FBQUMsTUFBTSwwQkFBYSxFQUNoQkMsRUFBQSxDQUFBRCxNQUFNLHFDQUFVLDJGQUw3QkUsRUFBQUMsRUFBQSxPQUFBLEVBQUEsT0FBQUMsRUFBQSxFQUFBQyxFQUFBQyxFQUFBLEtBQUEsQ0FFRUMsRUFBQUMsQ0FBQSxFQUFBQyxFQUNFLEVBcUJNLElBQUFBLEVBQUEsRUFBQSxFQUFBQyxLQUFBQyxFQXBCSixNQUdLWixFQUhMLENBQUFZLEVBQ0UsTUFBcUVWLEVBQXJFLENBTFJVLEVBQUEsS0FBQUMsRUFBQSxDQUFBRCxFQUFBLE1BTVFFLEVBQUtDLEVBQUFDLEVBQUt2QixPQUFDd0IsS0FBVUMsYUFBUyxFQUFBLGFBQUEsQ0FBQSxFQUFBUixFQUFBLENBQUEsSUFBQUEsRUFBQSxDQUFBLEVBQUFDLEVBQUEsR0FOdENELEVBQUEsQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQUUsRUFBQSxNQUFBLENBQUFYLE1BQUEsVUFBQSxFQUFBLFdBQUEsRUFBQSxFQUFBLENBQUEsRUFBQVMsRUFBQSxDQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBQyxFQUFBLEdBYU1ELEVBQUEsQ0FBQSxJQUVRQSxPQUZRLElBQU0sQ0FBQVQsTUFBQSxNQUFBLEVBQUE7QUFBQTtBQUFBLFFBQUEsRUFBQSxHQUFBUyxFQWI1QixDQWMyQyxJQUFBQSxFQUFBLENBQUEsRUFBQUMsRUFBQSxHQUFBSCxFQWQzQ0wsRUFhNkIsQ0FBQWdCLFNBQUEsTUFBQSxFQUFBLENBQUFDLFFBQUFDLEVBQUEsSUFBQSxDQWI3QlYsRUFBQTtBQUFBLDZDQUFBSSxFQUFBQyxFQUFBckIsU0FBQSxFQUFBLElBQUFvQixFQUFBQyxFQUFBcEIsSUFBQSxFQUFBLElBQUFtQixFQUFBQyxFQUFBdkIsT0FBQTZCLFdBQUEsRUFBQSxLQUFBUCxFQUFBQyxFQUFBdkIsT0FBQThCLE9BQUEsRUFBQTtBQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsUUFBQWIsRUFBQSxDQUFBLElBQUFBLEVBQUEsQ0FBQSxFQUFBQyxFQUFBLEdBa0JNRCxFQUFBLENBQUEsSUFBMkVBLE9BQTNELElBQU0sQ0FBQVQsTUFBQSxNQUFBLEVBQUEsbUNBQUEsRUFBQSxHQUFBUyxFQWxCNUIsQ0FrQnlFLElBQUFBLEVBQUEsQ0FBQSxFQUFBQyxFQUFBLEdBQUFILEVBbEJ6RUwsRUFrQjZCLENBQUFnQixTQUFBLE1BQUEsRUFBQSxDQUFBQyxRQUFBQyxFQUFBLElBQUFYLEVBQUEsQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQSxDQWxCN0JDLEVBQUEsOENBQUEsQ0FBQSxFQUFBLFFBQUFELEVBQUEsRUFBQSxJQUFBQSxFQUFBLEVBQUEsRUFBQUMsRUFBQSxHQXFCTUQsRUFBQSxFQUFBLElBRVFBLFFBRlEsSUFBTSxDQUFBVCxNQUFBLE1BQUEsRUFBQSw4QkFBQSxFQUFBLEdBQUFTLEVBckI1QixFQXVCTSxJQUFBQSxFQUFBLEVBQUEsRUFBQUMsRUFBQSxHQUFBSCxFQXZCTkwsRUFxQjZCLENBQUFnQixTQUFBLE1BQUEsRUFBQSxDQUFBQyxRQUFBQyxFQUFBLElBQUFYLEVBQUEsQ0FBQSxJQUFBQSxFQUFBLENBQUEsRUFBQSxDQXJCN0JDLEVBQUE7QUFBQTtBQUFBLE9BQUEsQ0FBQSxFQUFBIn0=
