var Po=Object.defineProperty;var To=(e,t,n)=>t in e?Po(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var Xt=(e,t,n)=>To(e,typeof t!="symbol"?t+"":t,n);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function n(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(r){if(r.ep)return;r.ep=!0;const i=n(r);fetch(r.href,i)}})();/**
* @vue/shared v3.5.6
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Bs(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const ie={},Ft=[],Ze=()=>{},Oo=()=>!1,Ln=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),Fs=e=>e.startsWith("onUpdate:"),ve=Object.assign,Ds=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},Io=Object.prototype.hasOwnProperty,Z=(e,t)=>Io.call(e,t),L=Array.isArray,Dt=e=>jn(e)==="[object Map]",oi=e=>jn(e)==="[object Set]",U=e=>typeof e=="function",he=e=>typeof e=="string",yt=e=>typeof e=="symbol",ce=e=>e!==null&&typeof e=="object",li=e=>(ce(e)||U(e))&&U(e.then)&&U(e.catch),fi=Object.prototype.toString,jn=e=>fi.call(e),Mo=e=>jn(e).slice(8,-1),ci=e=>jn(e)==="[object Object]",ks=e=>he(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,sn=Bs(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Un=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},$o=/-(\w)/g,We=Un(e=>e.replace($o,(t,n)=>n?n.toUpperCase():"")),No=/\B([A-Z])/g,Pt=Un(e=>e.replace(No,"-$1").toLowerCase()),Vn=Un(e=>e.charAt(0).toUpperCase()+e.slice(1)),es=Un(e=>e?`on${Vn(e)}`:""),mt=(e,t)=>!Object.is(e,t),On=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},ai=(e,t,n,s=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:s,value:n})},gs=e=>{const t=parseFloat(e);return isNaN(t)?e:t},Bo=e=>{const t=he(e)?Number(e):NaN;return isNaN(t)?e:t};let fr;const ui=()=>fr||(fr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Hs(e){if(L(e)){const t={};for(let n=0;n<e.length;n++){const s=e[n],r=he(s)?Ho(s):Hs(s);if(r)for(const i in r)t[i]=r[i]}return t}else if(he(e)||ce(e))return e}const Fo=/;(?![^(]*\))/g,Do=/:([^]+)/,ko=/\/\*[^]*?\*\//g;function Ho(e){const t={};return e.replace(ko,"").split(Fo).forEach(n=>{if(n){const s=n.split(Do);s.length>1&&(t[s[0].trim()]=s[1].trim())}}),t}function Ls(e){let t="";if(he(e))t=e;else if(L(e))for(let n=0;n<e.length;n++){const s=Ls(e[n]);s&&(t+=s+" ")}else if(ce(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const Lo="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",jo=Bs(Lo);function di(e){return!!e||e===""}const hi=e=>!!(e&&e.__v_isRef===!0),Y=e=>he(e)?e:e==null?"":L(e)||ce(e)&&(e.toString===fi||!U(e.toString))?hi(e)?Y(e.value):JSON.stringify(e,pi,2):String(e),pi=(e,t)=>hi(t)?pi(e,t.value):Dt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[s,r],i)=>(n[ts(s,i)+" =>"]=r,n),{})}:oi(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>ts(n))}:yt(t)?ts(t):ce(t)&&!L(t)&&!ci(t)?String(t):t,ts=(e,t="")=>{var n;return yt(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.5.6
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Ne;class Uo{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Ne,!t&&Ne&&(this.index=(Ne.scopes||(Ne.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].pause();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].resume();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].resume()}}run(t){if(this._active){const n=Ne;try{return Ne=this,t()}finally{Ne=n}}}on(){Ne=this}off(){Ne=this.parent}stop(t){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!t){const r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this._active=!1}}}function Vo(){return Ne}let re;const ns=new WeakSet;class gi{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Ne&&Ne.active&&Ne.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,ns.has(this)&&(ns.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||yi(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,cr(this),bi(this);const t=re,n=ze;re=this,ze=!0;try{return this.fn()}finally{vi(this),re=t,ze=n,this.flags&=-3}}stop(){if(this.flags&1){for(let t=this.deps;t;t=t.nextDep)Vs(t);this.deps=this.depsTail=void 0,cr(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?ns.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){ms(this)&&this.run()}get dirty(){return ms(this)}}let mi=0,rn;function yi(e){e.flags|=8,e.next=rn,rn=e}function js(){mi++}function Us(){if(--mi>0)return;let e;for(;rn;){let t=rn;for(rn=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(s){e||(e=s)}t=n}}if(e)throw e}function bi(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function vi(e){let t,n=e.depsTail,s=n;for(;s;){const r=s.prevDep;s.version===-1?(s===n&&(n=r),Vs(s),Ko(s)):t=s,s.dep.activeLink=s.prevActiveLink,s.prevActiveLink=void 0,s=r}e.deps=t,e.depsTail=n}function ms(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(wi(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function wi(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===dn))return;e.globalVersion=dn;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!ms(e)){e.flags&=-3;return}const n=re,s=ze;re=e,ze=!0;try{bi(e);const r=e.fn(e._value);(t.version===0||mt(r,e._value))&&(e._value=r,t.version++)}catch(r){throw t.version++,r}finally{re=n,ze=s,vi(e),e.flags&=-3}}function Vs(e){const{dep:t,prevSub:n,nextSub:s}=e;if(n&&(n.nextSub=s,e.prevSub=void 0),s&&(s.prevSub=n,e.nextSub=void 0),t.subs===e&&(t.subs=n),!t.subs&&t.computed){t.computed.flags&=-5;for(let r=t.computed.deps;r;r=r.nextDep)Vs(r)}}function Ko(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}let ze=!0;const xi=[];function bt(){xi.push(ze),ze=!1}function vt(){const e=xi.pop();ze=e===void 0?!0:e}function cr(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const n=re;re=void 0;try{t()}finally{re=n}}}let dn=0;class zo{constructor(t,n){this.sub=t,this.dep=n,this.version=n.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Ks{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0}track(t){if(!re||!ze||re===this.computed)return;let n=this.activeLink;if(n===void 0||n.sub!==re)n=this.activeLink=new zo(re,this),re.deps?(n.prevDep=re.depsTail,re.depsTail.nextDep=n,re.depsTail=n):re.deps=re.depsTail=n,re.flags&4&&_i(n);else if(n.version===-1&&(n.version=this.version,n.nextDep)){const s=n.nextDep;s.prevDep=n.prevDep,n.prevDep&&(n.prevDep.nextDep=s),n.prevDep=re.depsTail,n.nextDep=void 0,re.depsTail.nextDep=n,re.depsTail=n,re.deps===n&&(re.deps=s)}return n}trigger(t){this.version++,dn++,this.notify(t)}notify(t){js();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{Us()}}}function _i(e){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let s=t.deps;s;s=s.nextDep)_i(s)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}const ys=new WeakMap,St=Symbol(""),bs=Symbol(""),hn=Symbol("");function Ae(e,t,n){if(ze&&re){let s=ys.get(e);s||ys.set(e,s=new Map);let r=s.get(n);r||s.set(n,r=new Ks),r.track()}}function ot(e,t,n,s,r,i){const o=ys.get(e);if(!o){dn++;return}const l=f=>{f&&f.trigger()};if(js(),t==="clear")o.forEach(l);else{const f=L(e),h=f&&ks(n);if(f&&n==="length"){const d=Number(s);o.forEach((a,p)=>{(p==="length"||p===hn||!yt(p)&&p>=d)&&l(a)})}else switch(n!==void 0&&l(o.get(n)),h&&l(o.get(hn)),t){case"add":f?h&&l(o.get("length")):(l(o.get(St)),Dt(e)&&l(o.get(bs)));break;case"delete":f||(l(o.get(St)),Dt(e)&&l(o.get(bs)));break;case"set":Dt(e)&&l(o.get(St));break}}Us()}function Mt(e){const t=ee(e);return t===e?t:(Ae(t,"iterate",hn),He(e)?t:t.map(_e))}function Kn(e){return Ae(e=ee(e),"iterate",hn),e}const Wo={__proto__:null,[Symbol.iterator](){return ss(this,Symbol.iterator,_e)},concat(...e){return Mt(this).concat(...e.map(t=>L(t)?Mt(t):t))},entries(){return ss(this,"entries",e=>(e[1]=_e(e[1]),e))},every(e,t){return nt(this,"every",e,t,void 0,arguments)},filter(e,t){return nt(this,"filter",e,t,n=>n.map(_e),arguments)},find(e,t){return nt(this,"find",e,t,_e,arguments)},findIndex(e,t){return nt(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return nt(this,"findLast",e,t,_e,arguments)},findLastIndex(e,t){return nt(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return nt(this,"forEach",e,t,void 0,arguments)},includes(...e){return rs(this,"includes",e)},indexOf(...e){return rs(this,"indexOf",e)},join(e){return Mt(this).join(e)},lastIndexOf(...e){return rs(this,"lastIndexOf",e)},map(e,t){return nt(this,"map",e,t,void 0,arguments)},pop(){return en(this,"pop")},push(...e){return en(this,"push",e)},reduce(e,...t){return ar(this,"reduce",e,t)},reduceRight(e,...t){return ar(this,"reduceRight",e,t)},shift(){return en(this,"shift")},some(e,t){return nt(this,"some",e,t,void 0,arguments)},splice(...e){return en(this,"splice",e)},toReversed(){return Mt(this).toReversed()},toSorted(e){return Mt(this).toSorted(e)},toSpliced(...e){return Mt(this).toSpliced(...e)},unshift(...e){return en(this,"unshift",e)},values(){return ss(this,"values",_e)}};function ss(e,t,n){const s=Kn(e),r=s[t]();return s!==e&&!He(e)&&(r._next=r.next,r.next=()=>{const i=r._next();return i.value&&(i.value=n(i.value)),i}),r}const Go=Array.prototype;function nt(e,t,n,s,r,i){const o=Kn(e),l=o!==e&&!He(e),f=o[t];if(f!==Go[t]){const a=f.apply(e,i);return l?_e(a):a}let h=n;o!==e&&(l?h=function(a,p){return n.call(this,_e(a),p,e)}:n.length>2&&(h=function(a,p){return n.call(this,a,p,e)}));const d=f.call(o,h,s);return l&&r?r(d):d}function ar(e,t,n,s){const r=Kn(e);let i=n;return r!==e&&(He(e)?n.length>3&&(i=function(o,l,f){return n.call(this,o,l,f,e)}):i=function(o,l,f){return n.call(this,o,_e(l),f,e)}),r[t](i,...s)}function rs(e,t,n){const s=ee(e);Ae(s,"iterate",hn);const r=s[t](...n);return(r===-1||r===!1)&&qs(n[0])?(n[0]=ee(n[0]),s[t](...n)):r}function en(e,t,n=[]){bt(),js();const s=ee(e)[t].apply(e,n);return Us(),vt(),s}const qo=Bs("__proto__,__v_isRef,__isVue"),Ei=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(yt));function Jo(e){yt(e)||(e=String(e));const t=ee(this);return Ae(t,"has",e),t.hasOwnProperty(e)}class Si{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,s){const r=this._isReadonly,i=this._isShallow;if(n==="__v_isReactive")return!r;if(n==="__v_isReadonly")return r;if(n==="__v_isShallow")return i;if(n==="__v_raw")return s===(r?i?fl:Pi:i?Ci:Ri).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(s)?t:void 0;const o=L(t);if(!r){let f;if(o&&(f=Wo[n]))return f;if(n==="hasOwnProperty")return Jo}const l=Reflect.get(t,n,Se(t)?t:s);return(yt(n)?Ei.has(n):qo(n))||(r||Ae(t,"get",n),i)?l:Se(l)?o&&ks(n)?l:l.value:ce(l)?r?Oi(l):Wn(l):l}}class Ai extends Si{constructor(t=!1){super(!1,t)}set(t,n,s,r){let i=t[n];if(!this._isShallow){const f=Rt(i);if(!He(s)&&!Rt(s)&&(i=ee(i),s=ee(s)),!L(t)&&Se(i)&&!Se(s))return f?!1:(i.value=s,!0)}const o=L(t)&&ks(n)?Number(n)<t.length:Z(t,n),l=Reflect.set(t,n,s,Se(t)?t:r);return t===ee(r)&&(o?mt(s,i)&&ot(t,"set",n,s):ot(t,"add",n,s)),l}deleteProperty(t,n){const s=Z(t,n);t[n];const r=Reflect.deleteProperty(t,n);return r&&s&&ot(t,"delete",n,void 0),r}has(t,n){const s=Reflect.has(t,n);return(!yt(n)||!Ei.has(n))&&Ae(t,"has",n),s}ownKeys(t){return Ae(t,"iterate",L(t)?"length":St),Reflect.ownKeys(t)}}class Yo extends Si{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Qo=new Ai,Zo=new Yo,Xo=new Ai(!0);const zs=e=>e,zn=e=>Reflect.getPrototypeOf(e);function Sn(e,t,n=!1,s=!1){e=e.__v_raw;const r=ee(e),i=ee(t);n||(mt(t,i)&&Ae(r,"get",t),Ae(r,"get",i));const{has:o}=zn(r),l=s?zs:n?Js:_e;if(o.call(r,t))return l(e.get(t));if(o.call(r,i))return l(e.get(i));e!==r&&e.get(t)}function An(e,t=!1){const n=this.__v_raw,s=ee(n),r=ee(e);return t||(mt(e,r)&&Ae(s,"has",e),Ae(s,"has",r)),e===r?n.has(e):n.has(e)||n.has(r)}function Rn(e,t=!1){return e=e.__v_raw,!t&&Ae(ee(e),"iterate",St),Reflect.get(e,"size",e)}function ur(e,t=!1){!t&&!He(e)&&!Rt(e)&&(e=ee(e));const n=ee(this);return zn(n).has.call(n,e)||(n.add(e),ot(n,"add",e,e)),this}function dr(e,t,n=!1){!n&&!He(t)&&!Rt(t)&&(t=ee(t));const s=ee(this),{has:r,get:i}=zn(s);let o=r.call(s,e);o||(e=ee(e),o=r.call(s,e));const l=i.call(s,e);return s.set(e,t),o?mt(t,l)&&ot(s,"set",e,t):ot(s,"add",e,t),this}function hr(e){const t=ee(this),{has:n,get:s}=zn(t);let r=n.call(t,e);r||(e=ee(e),r=n.call(t,e)),s&&s.call(t,e);const i=t.delete(e);return r&&ot(t,"delete",e,void 0),i}function pr(){const e=ee(this),t=e.size!==0,n=e.clear();return t&&ot(e,"clear",void 0,void 0),n}function Cn(e,t){return function(s,r){const i=this,o=i.__v_raw,l=ee(o),f=t?zs:e?Js:_e;return!e&&Ae(l,"iterate",St),o.forEach((h,d)=>s.call(r,f(h),f(d),i))}}function Pn(e,t,n){return function(...s){const r=this.__v_raw,i=ee(r),o=Dt(i),l=e==="entries"||e===Symbol.iterator&&o,f=e==="keys"&&o,h=r[e](...s),d=n?zs:t?Js:_e;return!t&&Ae(i,"iterate",f?bs:St),{next(){const{value:a,done:p}=h.next();return p?{value:a,done:p}:{value:l?[d(a[0]),d(a[1])]:d(a),done:p}},[Symbol.iterator](){return this}}}}function at(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function el(){const e={get(i){return Sn(this,i)},get size(){return Rn(this)},has:An,add:ur,set:dr,delete:hr,clear:pr,forEach:Cn(!1,!1)},t={get(i){return Sn(this,i,!1,!0)},get size(){return Rn(this)},has:An,add(i){return ur.call(this,i,!0)},set(i,o){return dr.call(this,i,o,!0)},delete:hr,clear:pr,forEach:Cn(!1,!0)},n={get(i){return Sn(this,i,!0)},get size(){return Rn(this,!0)},has(i){return An.call(this,i,!0)},add:at("add"),set:at("set"),delete:at("delete"),clear:at("clear"),forEach:Cn(!0,!1)},s={get(i){return Sn(this,i,!0,!0)},get size(){return Rn(this,!0)},has(i){return An.call(this,i,!0)},add:at("add"),set:at("set"),delete:at("delete"),clear:at("clear"),forEach:Cn(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=Pn(i,!1,!1),n[i]=Pn(i,!0,!1),t[i]=Pn(i,!1,!0),s[i]=Pn(i,!0,!0)}),[e,n,t,s]}const[tl,nl,sl,rl]=el();function Ws(e,t){const n=t?e?rl:sl:e?nl:tl;return(s,r,i)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?s:Reflect.get(Z(n,r)&&r in s?n:s,r,i)}const il={get:Ws(!1,!1)},ol={get:Ws(!1,!0)},ll={get:Ws(!0,!1)};const Ri=new WeakMap,Ci=new WeakMap,Pi=new WeakMap,fl=new WeakMap;function cl(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function al(e){return e.__v_skip||!Object.isExtensible(e)?0:cl(Mo(e))}function Wn(e){return Rt(e)?e:Gs(e,!1,Qo,il,Ri)}function Ti(e){return Gs(e,!1,Xo,ol,Ci)}function Oi(e){return Gs(e,!0,Zo,ll,Pi)}function Gs(e,t,n,s,r){if(!ce(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=r.get(e);if(i)return i;const o=al(e);if(o===0)return e;const l=new Proxy(e,o===2?s:n);return r.set(e,l),l}function kt(e){return Rt(e)?kt(e.__v_raw):!!(e&&e.__v_isReactive)}function Rt(e){return!!(e&&e.__v_isReadonly)}function He(e){return!!(e&&e.__v_isShallow)}function qs(e){return e?!!e.__v_raw:!1}function ee(e){const t=e&&e.__v_raw;return t?ee(t):e}function ul(e){return!Z(e,"__v_skip")&&Object.isExtensible(e)&&ai(e,"__v_skip",!0),e}const _e=e=>ce(e)?Wn(e):e,Js=e=>ce(e)?Oi(e):e;function Se(e){return e?e.__v_isRef===!0:!1}function me(e){return Ii(e,!1)}function dl(e){return Ii(e,!0)}function Ii(e,t){return Se(e)?e:new hl(e,t)}class hl{constructor(t,n){this.dep=new Ks,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:ee(t),this._value=n?t:_e(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,s=this.__v_isShallow||He(t)||Rt(t);t=s?t:ee(t),mt(t,n)&&(this._rawValue=t,this._value=s?t:_e(t),this.dep.trigger())}}function Ht(e){return Se(e)?e.value:e}const pl={get:(e,t,n)=>t==="__v_raw"?e:Ht(Reflect.get(e,t,n)),set:(e,t,n,s)=>{const r=e[t];return Se(r)&&!Se(n)?(r.value=n,!0):Reflect.set(e,t,n,s)}};function Mi(e){return kt(e)?e:new Proxy(e,pl)}class gl{constructor(t,n,s){this.fn=t,this.setter=n,this._value=void 0,this.dep=new Ks(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=dn-1,this.effect=this,this.__v_isReadonly=!n,this.isSSR=s}notify(){if(this.flags|=16,!(this.flags&8)&&re!==this)return yi(this),!0}get value(){const t=this.dep.track();return wi(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function ml(e,t,n=!1){let s,r;return U(e)?s=e:(s=e.get,r=e.set),new gl(s,r,n)}const Tn={},Bn=new WeakMap;let Et;function yl(e,t=!1,n=Et){if(n){let s=Bn.get(n);s||Bn.set(n,s=[]),s.push(e)}}function bl(e,t,n=ie){const{immediate:s,deep:r,once:i,scheduler:o,augmentJob:l,call:f}=n,h=N=>r?N:He(N)||r===!1||r===0?it(N,1):it(N);let d,a,p,m,R=!1,T=!1;if(Se(e)?(a=()=>e.value,R=He(e)):kt(e)?(a=()=>h(e),R=!0):L(e)?(T=!0,R=e.some(N=>kt(N)||He(N)),a=()=>e.map(N=>{if(Se(N))return N.value;if(kt(N))return h(N);if(U(N))return f?f(N,2):N()})):U(e)?t?a=f?()=>f(e,2):e:a=()=>{if(p){bt();try{p()}finally{vt()}}const N=Et;Et=d;try{return f?f(e,3,[m]):e(m)}finally{Et=N}}:a=Ze,t&&r){const N=a,$=r===!0?1/0:r;a=()=>it(N(),$)}const V=Vo(),F=()=>{d.stop(),V&&Ds(V.effects,d)};if(i&&t){const N=t;t=(...$)=>{N(...$),F()}}let M=T?new Array(e.length).fill(Tn):Tn;const D=N=>{if(!(!(d.flags&1)||!d.dirty&&!N))if(t){const $=d.run();if(r||R||(T?$.some((K,z)=>mt(K,M[z])):mt($,M))){p&&p();const K=Et;Et=d;try{const z=[$,M===Tn?void 0:T&&M[0]===Tn?[]:M,m];f?f(t,3,z):t(...z),M=$}finally{Et=K}}}else d.run()};return l&&l(D),d=new gi(a),d.scheduler=o?()=>o(D,!1):D,m=N=>yl(N,!1,d),p=d.onStop=()=>{const N=Bn.get(d);if(N){if(f)f(N,4);else for(const $ of N)$();Bn.delete(d)}},t?s?D(!0):M=d.run():o?o(D.bind(null,!0),!0):d.run(),F.pause=d.pause.bind(d),F.resume=d.resume.bind(d),F.stop=F,F}function it(e,t=1/0,n){if(t<=0||!ce(e)||e.__v_skip||(n=n||new Set,n.has(e)))return e;if(n.add(e),t--,Se(e))it(e.value,t,n);else if(L(e))for(let s=0;s<e.length;s++)it(e[s],t,n);else if(oi(e)||Dt(e))e.forEach(s=>{it(s,t,n)});else if(ci(e)){for(const s in e)it(e[s],t,n);for(const s of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,s)&&it(e[s],t,n)}return e}/**
* @vue/runtime-core v3.5.6
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function vn(e,t,n,s){try{return s?e(...s):e()}catch(r){wn(r,t,n)}}function et(e,t,n,s){if(U(e)){const r=vn(e,t,n,s);return r&&li(r)&&r.catch(i=>{wn(i,t,n)}),r}if(L(e)){const r=[];for(let i=0;i<e.length;i++)r.push(et(e[i],t,n,s));return r}}function wn(e,t,n,s=!0){const r=t?t.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:o}=t&&t.appContext.config||ie;if(t){let l=t.parent;const f=t.proxy,h=`https://vuejs.org/error-reference/#runtime-${n}`;for(;l;){const d=l.ec;if(d){for(let a=0;a<d.length;a++)if(d[a](e,f,h)===!1)return}l=l.parent}if(i){bt(),vn(i,null,10,[e,f,h]),vt();return}}vl(e,n,r,s,o)}function vl(e,t,n,s=!0,r=!1){if(r)throw e;console.error(e)}let pn=!1,vs=!1;const Ce=[];let Qe=0;const Lt=[];let dt=null,$t=0;const $i=Promise.resolve();let Ys=null;function Ni(e){const t=Ys||$i;return e?t.then(this?e.bind(this):e):t}function wl(e){let t=pn?Qe+1:0,n=Ce.length;for(;t<n;){const s=t+n>>>1,r=Ce[s],i=gn(r);i<e||i===e&&r.flags&2?t=s+1:n=s}return t}function Qs(e){if(!(e.flags&1)){const t=gn(e),n=Ce[Ce.length-1];!n||!(e.flags&2)&&t>=gn(n)?Ce.push(e):Ce.splice(wl(t),0,e),e.flags|=1,Bi()}}function Bi(){!pn&&!vs&&(vs=!0,Ys=$i.then(Di))}function ws(e){L(e)?Lt.push(...e):dt&&e.id===-1?dt.splice($t+1,0,e):e.flags&1||(Lt.push(e),e.flags|=1),Bi()}function gr(e,t,n=pn?Qe+1:0){for(;n<Ce.length;n++){const s=Ce[n];if(s&&s.flags&2){if(e&&s.id!==e.uid)continue;Ce.splice(n,1),n--,s.flags&4&&(s.flags&=-2),s(),s.flags&=-2}}}function Fi(e){if(Lt.length){const t=[...new Set(Lt)].sort((n,s)=>gn(n)-gn(s));if(Lt.length=0,dt){dt.push(...t);return}for(dt=t,$t=0;$t<dt.length;$t++){const n=dt[$t];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}dt=null,$t=0}}const gn=e=>e.id==null?e.flags&2?-1:1/0:e.id;function Di(e){vs=!1,pn=!0;try{for(Qe=0;Qe<Ce.length;Qe++){const t=Ce[Qe];t&&!(t.flags&8)&&(t.flags&4&&(t.flags&=-2),vn(t,t.i,t.i?15:14),t.flags&=-2)}}finally{for(;Qe<Ce.length;Qe++){const t=Ce[Qe];t&&(t.flags&=-2)}Qe=0,Ce.length=0,Fi(),pn=!1,Ys=null,(Ce.length||Lt.length)&&Di()}}let Be=null,ki=null;function Fn(e){const t=Be;return Be=e,ki=e&&e.type.__scopeId||null,t}function jt(e,t=Be,n){if(!t||e._n)return e;const s=(...r)=>{s._d&&Ar(-1);const i=Fn(t);let o;try{o=e(...r)}finally{Fn(i),s._d&&Ar(1)}return o};return s._n=!0,s._c=!0,s._d=!0,s}function Ut(e,t){if(Be===null)return e;const n=Qn(Be),s=e.dirs||(e.dirs=[]);for(let r=0;r<t.length;r++){let[i,o,l,f=ie]=t[r];i&&(U(i)&&(i={mounted:i,updated:i}),i.deep&&it(o),s.push({dir:i,instance:n,value:o,oldValue:void 0,arg:l,modifiers:f}))}return e}function xt(e,t,n,s){const r=e.dirs,i=t&&t.dirs;for(let o=0;o<r.length;o++){const l=r[o];i&&(l.oldValue=i[o].value);let f=l.dir[s];f&&(bt(),et(f,n,8,[e.el,l,e,t]),vt())}}const xl=Symbol("_vte"),_l=e=>e.__isTeleport;function Zs(e,t){e.shapeFlag&6&&e.component?(e.transition=t,Zs(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}/*! #__NO_SIDE_EFFECTS__ */function wt(e,t){return U(e)?ve({name:e.name},t,{setup:e}):e}function Hi(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function xs(e,t,n,s,r=!1){if(L(e)){e.forEach((R,T)=>xs(R,t&&(L(t)?t[T]:t),n,s,r));return}if(on(s)&&!r)return;const i=s.shapeFlag&4?Qn(s.component):s.el,o=r?null:i,{i:l,r:f}=e,h=t&&t.r,d=l.refs===ie?l.refs={}:l.refs,a=l.setupState,p=ee(a),m=a===ie?()=>!1:R=>Z(p,R);if(h!=null&&h!==f&&(he(h)?(d[h]=null,m(h)&&(a[h]=null)):Se(h)&&(h.value=null)),U(f))vn(f,l,12,[o,d]);else{const R=he(f),T=Se(f);if(R||T){const V=()=>{if(e.f){const F=R?m(f)?a[f]:d[f]:f.value;r?L(F)&&Ds(F,i):L(F)?F.includes(i)||F.push(i):R?(d[f]=[i],m(f)&&(a[f]=d[f])):(f.value=[i],e.k&&(d[e.k]=f.value))}else R?(d[f]=o,m(f)&&(a[f]=o)):T&&(f.value=o,e.k&&(d[e.k]=o))};o?(V.id=-1,$e(V,n)):V()}}}const on=e=>!!e.type.__asyncLoader,Li=e=>e.type.__isKeepAlive;function El(e,t){ji(e,"a",t)}function Sl(e,t){ji(e,"da",t)}function ji(e,t,n=Ee){const s=e.__wdc||(e.__wdc=()=>{let r=n;for(;r;){if(r.isDeactivated)return;r=r.parent}return e()});if(Gn(t,s,n),n){let r=n.parent;for(;r&&r.parent;)Li(r.parent.vnode)&&Al(s,t,n,r),r=r.parent}}function Al(e,t,n,s){const r=Gn(t,e,s,!0);Ui(()=>{Ds(s[t],r)},n)}function Gn(e,t,n=Ee,s=!1){if(n){const r=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...o)=>{bt();const l=xn(n),f=et(t,n,e,o);return l(),vt(),f});return s?r.unshift(i):r.push(i),i}}const ft=e=>(t,n=Ee)=>{(!Yn||e==="sp")&&Gn(e,(...s)=>t(...s),n)},Rl=ft("bm"),Cl=ft("m"),Pl=ft("bu"),Tl=ft("u"),Ol=ft("bum"),Ui=ft("um"),Il=ft("sp"),Ml=ft("rtg"),$l=ft("rtc");function Nl(e,t=Ee){Gn("ec",e,t)}const Bl="components";function Ct(e,t){return Dl(Bl,e,!0,t)||e}const Fl=Symbol.for("v-ndc");function Dl(e,t,n=!0,s=!1){const r=Be||Ee;if(r){const i=r.type;{const l=Of(i,!1);if(l&&(l===t||l===We(t)||l===Vn(We(t))))return i}const o=mr(r[e]||i[e],t)||mr(r.appContext[e],t);return!o&&s?i:o}}function mr(e,t){return e&&(e[t]||e[We(t)]||e[Vn(We(t))])}function At(e,t,n,s){let r;const i=n,o=L(e);if(o||he(e)){const l=o&&kt(e);let f=!1;l&&(f=!He(e),e=Kn(e)),r=new Array(e.length);for(let h=0,d=e.length;h<d;h++)r[h]=t(f?_e(e[h]):e[h],h,void 0,i)}else if(typeof e=="number"){r=new Array(e);for(let l=0;l<e;l++)r[l]=t(l+1,l,void 0,i)}else if(ce(e))if(e[Symbol.iterator])r=Array.from(e,(l,f)=>t(l,f,void 0,i));else{const l=Object.keys(e);r=new Array(l.length);for(let f=0,h=l.length;f<h;f++){const d=l[f];r[f]=t(e[d],d,f,i)}}else r=[];return r}const _s=e=>e?ao(e)?Qn(e):_s(e.parent):null,ln=ve(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>_s(e.parent),$root:e=>_s(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Xs(e),$forceUpdate:e=>e.f||(e.f=()=>{Qs(e.update)}),$nextTick:e=>e.n||(e.n=Ni.bind(e.proxy)),$watch:e=>rf.bind(e)}),is=(e,t)=>e!==ie&&!e.__isScriptSetup&&Z(e,t),kl={get({_:e},t){if(t==="__v_skip")return!0;const{ctx:n,setupState:s,data:r,props:i,accessCache:o,type:l,appContext:f}=e;let h;if(t[0]!=="$"){const m=o[t];if(m!==void 0)switch(m){case 1:return s[t];case 2:return r[t];case 4:return n[t];case 3:return i[t]}else{if(is(s,t))return o[t]=1,s[t];if(r!==ie&&Z(r,t))return o[t]=2,r[t];if((h=e.propsOptions[0])&&Z(h,t))return o[t]=3,i[t];if(n!==ie&&Z(n,t))return o[t]=4,n[t];Es&&(o[t]=0)}}const d=ln[t];let a,p;if(d)return t==="$attrs"&&Ae(e.attrs,"get",""),d(e);if((a=l.__cssModules)&&(a=a[t]))return a;if(n!==ie&&Z(n,t))return o[t]=4,n[t];if(p=f.config.globalProperties,Z(p,t))return p[t]},set({_:e},t,n){const{data:s,setupState:r,ctx:i}=e;return is(r,t)?(r[t]=n,!0):s!==ie&&Z(s,t)?(s[t]=n,!0):Z(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:s,appContext:r,propsOptions:i}},o){let l;return!!n[o]||e!==ie&&Z(e,o)||is(t,o)||(l=i[0])&&Z(l,o)||Z(s,o)||Z(ln,o)||Z(r.config.globalProperties,o)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:Z(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function yr(e){return L(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let Es=!0;function Hl(e){const t=Xs(e),n=e.proxy,s=e.ctx;Es=!1,t.beforeCreate&&br(t.beforeCreate,e,"bc");const{data:r,computed:i,methods:o,watch:l,provide:f,inject:h,created:d,beforeMount:a,mounted:p,beforeUpdate:m,updated:R,activated:T,deactivated:V,beforeDestroy:F,beforeUnmount:M,destroyed:D,unmounted:N,render:$,renderTracked:K,renderTriggered:z,errorCaptured:pe,serverPrefetch:ue,expose:le,inheritAttrs:we,components:be,directives:ye,filters:Fe}=t;if(h&&Ll(h,s,null),o)for(const J in o){const Q=o[J];U(Q)&&(s[J]=Q.bind(n))}if(r){const J=r.call(n,n);ce(J)&&(e.data=Wn(J))}if(Es=!0,i)for(const J in i){const Q=i[J],tt=U(Q)?Q.bind(n,n):U(Q.get)?Q.get.bind(n,n):Ze,ct=!U(Q)&&U(Q.set)?Q.set.bind(n):Ze,qe=Ve({get:tt,set:ct});Object.defineProperty(s,J,{enumerable:!0,configurable:!0,get:()=>qe.value,set:Pe=>qe.value=Pe})}if(l)for(const J in l)Vi(l[J],s,n,J);if(f){const J=U(f)?f.call(n):f;Reflect.ownKeys(J).forEach(Q=>{In(Q,J[Q])})}d&&br(d,e,"c");function fe(J,Q){L(Q)?Q.forEach(tt=>J(tt.bind(n))):Q&&J(Q.bind(n))}if(fe(Rl,a),fe(Cl,p),fe(Pl,m),fe(Tl,R),fe(El,T),fe(Sl,V),fe(Nl,pe),fe($l,K),fe(Ml,z),fe(Ol,M),fe(Ui,N),fe(Il,ue),L(le))if(le.length){const J=e.exposed||(e.exposed={});le.forEach(Q=>{Object.defineProperty(J,Q,{get:()=>n[Q],set:tt=>n[Q]=tt})})}else e.exposed||(e.exposed={});$&&e.render===Ze&&(e.render=$),we!=null&&(e.inheritAttrs=we),be&&(e.components=be),ye&&(e.directives=ye),ue&&Hi(e)}function Ll(e,t,n=Ze){L(e)&&(e=Ss(e));for(const s in e){const r=e[s];let i;ce(r)?"default"in r?i=Xe(r.from||s,r.default,!0):i=Xe(r.from||s):i=Xe(r),Se(i)?Object.defineProperty(t,s,{enumerable:!0,configurable:!0,get:()=>i.value,set:o=>i.value=o}):t[s]=i}}function br(e,t,n){et(L(e)?e.map(s=>s.bind(t.proxy)):e.bind(t.proxy),t,n)}function Vi(e,t,n,s){let r=s.includes(".")?so(n,s):()=>n[s];if(he(e)){const i=t[e];U(i)&&Mn(r,i)}else if(U(e))Mn(r,e.bind(n));else if(ce(e))if(L(e))e.forEach(i=>Vi(i,t,n,s));else{const i=U(e.handler)?e.handler.bind(n):t[e.handler];U(i)&&Mn(r,i,e)}}function Xs(e){const t=e.type,{mixins:n,extends:s}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:o}}=e.appContext,l=i.get(t);let f;return l?f=l:!r.length&&!n&&!s?f=t:(f={},r.length&&r.forEach(h=>Dn(f,h,o,!0)),Dn(f,t,o)),ce(t)&&i.set(t,f),f}function Dn(e,t,n,s=!1){const{mixins:r,extends:i}=t;i&&Dn(e,i,n,!0),r&&r.forEach(o=>Dn(e,o,n,!0));for(const o in t)if(!(s&&o==="expose")){const l=jl[o]||n&&n[o];e[o]=l?l(e[o],t[o]):t[o]}return e}const jl={data:vr,props:wr,emits:wr,methods:nn,computed:nn,beforeCreate:Re,created:Re,beforeMount:Re,mounted:Re,beforeUpdate:Re,updated:Re,beforeDestroy:Re,beforeUnmount:Re,destroyed:Re,unmounted:Re,activated:Re,deactivated:Re,errorCaptured:Re,serverPrefetch:Re,components:nn,directives:nn,watch:Vl,provide:vr,inject:Ul};function vr(e,t){return t?e?function(){return ve(U(e)?e.call(this,this):e,U(t)?t.call(this,this):t)}:t:e}function Ul(e,t){return nn(Ss(e),Ss(t))}function Ss(e){if(L(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Re(e,t){return e?[...new Set([].concat(e,t))]:t}function nn(e,t){return e?ve(Object.create(null),e,t):t}function wr(e,t){return e?L(e)&&L(t)?[...new Set([...e,...t])]:ve(Object.create(null),yr(e),yr(t??{})):t}function Vl(e,t){if(!e)return t;if(!t)return e;const n=ve(Object.create(null),e);for(const s in t)n[s]=Re(e[s],t[s]);return n}function Ki(){return{app:null,config:{isNativeTag:Oo,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Kl=0;function zl(e,t){return function(s,r=null){U(s)||(s=ve({},s)),r!=null&&!ce(r)&&(r=null);const i=Ki(),o=new WeakSet,l=[];let f=!1;const h=i.app={_uid:Kl++,_component:s,_props:r,_container:null,_context:i,_instance:null,version:Mf,get config(){return i.config},set config(d){},use(d,...a){return o.has(d)||(d&&U(d.install)?(o.add(d),d.install(h,...a)):U(d)&&(o.add(d),d(h,...a))),h},mixin(d){return i.mixins.includes(d)||i.mixins.push(d),h},component(d,a){return a?(i.components[d]=a,h):i.components[d]},directive(d,a){return a?(i.directives[d]=a,h):i.directives[d]},mount(d,a,p){if(!f){const m=h._ceVNode||de(s,r);return m.appContext=i,p===!0?p="svg":p===!1&&(p=void 0),a&&t?t(m,d):e(m,d,p),f=!0,h._container=d,d.__vue_app__=h,Qn(m.component)}},onUnmount(d){l.push(d)},unmount(){f&&(et(l,h._instance,16),e(null,h._container),delete h._container.__vue_app__)},provide(d,a){return i.provides[d]=a,h},runWithContext(d){const a=Vt;Vt=h;try{return d()}finally{Vt=a}}};return h}}let Vt=null;function In(e,t){if(Ee){let n=Ee.provides;const s=Ee.parent&&Ee.parent.provides;s===n&&(n=Ee.provides=Object.create(s)),n[e]=t}}function Xe(e,t,n=!1){const s=Ee||Be;if(s||Vt){const r=Vt?Vt._context.provides:s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:void 0;if(r&&e in r)return r[e];if(arguments.length>1)return n&&U(t)?t.call(s&&s.proxy):t}}const zi={},Wi=()=>Object.create(zi),Gi=e=>Object.getPrototypeOf(e)===zi;function Wl(e,t,n,s=!1){const r={},i=Wi();e.propsDefaults=Object.create(null),qi(e,t,r,i);for(const o in e.propsOptions[0])o in r||(r[o]=void 0);n?e.props=s?r:Ti(r):e.type.props?e.props=r:e.props=i,e.attrs=i}function Gl(e,t,n,s){const{props:r,attrs:i,vnode:{patchFlag:o}}=e,l=ee(r),[f]=e.propsOptions;let h=!1;if((s||o>0)&&!(o&16)){if(o&8){const d=e.vnode.dynamicProps;for(let a=0;a<d.length;a++){let p=d[a];if(qn(e.emitsOptions,p))continue;const m=t[p];if(f)if(Z(i,p))m!==i[p]&&(i[p]=m,h=!0);else{const R=We(p);r[R]=As(f,l,R,m,e,!1)}else m!==i[p]&&(i[p]=m,h=!0)}}}else{qi(e,t,r,i)&&(h=!0);let d;for(const a in l)(!t||!Z(t,a)&&((d=Pt(a))===a||!Z(t,d)))&&(f?n&&(n[a]!==void 0||n[d]!==void 0)&&(r[a]=As(f,l,a,void 0,e,!0)):delete r[a]);if(i!==l)for(const a in i)(!t||!Z(t,a))&&(delete i[a],h=!0)}h&&ot(e.attrs,"set","")}function qi(e,t,n,s){const[r,i]=e.propsOptions;let o=!1,l;if(t)for(let f in t){if(sn(f))continue;const h=t[f];let d;r&&Z(r,d=We(f))?!i||!i.includes(d)?n[d]=h:(l||(l={}))[d]=h:qn(e.emitsOptions,f)||(!(f in s)||h!==s[f])&&(s[f]=h,o=!0)}if(i){const f=ee(n),h=l||ie;for(let d=0;d<i.length;d++){const a=i[d];n[a]=As(r,f,a,h[a],e,!Z(h,a))}}return o}function As(e,t,n,s,r,i){const o=e[n];if(o!=null){const l=Z(o,"default");if(l&&s===void 0){const f=o.default;if(o.type!==Function&&!o.skipFactory&&U(f)){const{propsDefaults:h}=r;if(n in h)s=h[n];else{const d=xn(r);s=h[n]=f.call(null,t),d()}}else s=f;r.ce&&r.ce._setProp(n,s)}o[0]&&(i&&!l?s=!1:o[1]&&(s===""||s===Pt(n))&&(s=!0))}return s}const ql=new WeakMap;function Ji(e,t,n=!1){const s=n?ql:t.propsCache,r=s.get(e);if(r)return r;const i=e.props,o={},l=[];let f=!1;if(!U(e)){const d=a=>{f=!0;const[p,m]=Ji(a,t,!0);ve(o,p),m&&l.push(...m)};!n&&t.mixins.length&&t.mixins.forEach(d),e.extends&&d(e.extends),e.mixins&&e.mixins.forEach(d)}if(!i&&!f)return ce(e)&&s.set(e,Ft),Ft;if(L(i))for(let d=0;d<i.length;d++){const a=We(i[d]);xr(a)&&(o[a]=ie)}else if(i)for(const d in i){const a=We(d);if(xr(a)){const p=i[d],m=o[a]=L(p)||U(p)?{type:p}:ve({},p),R=m.type;let T=!1,V=!0;if(L(R))for(let F=0;F<R.length;++F){const M=R[F],D=U(M)&&M.name;if(D==="Boolean"){T=!0;break}else D==="String"&&(V=!1)}else T=U(R)&&R.name==="Boolean";m[0]=T,m[1]=V,(T||Z(m,"default"))&&l.push(a)}}const h=[o,l];return ce(e)&&s.set(e,h),h}function xr(e){return e[0]!=="$"&&!sn(e)}const Yi=e=>e[0]==="_"||e==="$stable",er=e=>L(e)?e.map(Ue):[Ue(e)],Jl=(e,t,n)=>{if(t._n)return t;const s=jt((...r)=>er(t(...r)),n);return s._c=!1,s},Qi=(e,t,n)=>{const s=e._ctx;for(const r in e){if(Yi(r))continue;const i=e[r];if(U(i))t[r]=Jl(r,i,s);else if(i!=null){const o=er(i);t[r]=()=>o}}},Zi=(e,t)=>{const n=er(t);e.slots.default=()=>n},Xi=(e,t,n)=>{for(const s in t)(n||s!=="_")&&(e[s]=t[s])},Yl=(e,t,n)=>{const s=e.slots=Wi();if(e.vnode.shapeFlag&32){const r=t._;r?(Xi(s,t,n),n&&ai(s,"_",r,!0)):Qi(t,s)}else t&&Zi(e,t)},Ql=(e,t,n)=>{const{vnode:s,slots:r}=e;let i=!0,o=ie;if(s.shapeFlag&32){const l=t._;l?n&&l===1?i=!1:Xi(r,t,n):(i=!t.$stable,Qi(t,r)),o=t}else t&&(Zi(e,t),o={default:1});if(i)for(const l in r)!Yi(l)&&o[l]==null&&delete r[l]},$e=bf;function Zl(e){return Xl(e)}function Xl(e,t){const n=ui();n.__VUE__=!0;const{insert:s,remove:r,patchProp:i,createElement:o,createText:l,createComment:f,setText:h,setElementText:d,parentNode:a,nextSibling:p,setScopeId:m=Ze,insertStaticContent:R}=e,T=(c,u,g,w=null,y=null,x=null,C=void 0,A=null,S=!!u.dynamicChildren)=>{if(c===u)return;c&&!gt(c,u)&&(w=v(c),Pe(c,y,x,!0),c=null),u.patchFlag===-2&&(S=!1,u.dynamicChildren=null);const{type:_,ref:H,shapeFlag:O}=u;switch(_){case Jn:V(c,u,g,w);break;case lt:F(c,u,g,w);break;case fs:c==null&&M(u,g,w,C);break;case ge:be(c,u,g,w,y,x,C,A,S);break;default:O&1?$(c,u,g,w,y,x,C,A,S):O&6?ye(c,u,g,w,y,x,C,A,S):(O&64||O&128)&&_.process(c,u,g,w,y,x,C,A,S,B)}H!=null&&y&&xs(H,c&&c.ref,x,u||c,!u)},V=(c,u,g,w)=>{if(c==null)s(u.el=l(u.children),g,w);else{const y=u.el=c.el;u.children!==c.children&&h(y,u.children)}},F=(c,u,g,w)=>{c==null?s(u.el=f(u.children||""),g,w):u.el=c.el},M=(c,u,g,w)=>{[c.el,c.anchor]=R(c.children,u,g,w,c.el,c.anchor)},D=({el:c,anchor:u},g,w)=>{let y;for(;c&&c!==u;)y=p(c),s(c,g,w),c=y;s(u,g,w)},N=({el:c,anchor:u})=>{let g;for(;c&&c!==u;)g=p(c),r(c),c=g;r(u)},$=(c,u,g,w,y,x,C,A,S)=>{u.type==="svg"?C="svg":u.type==="math"&&(C="mathml"),c==null?K(u,g,w,y,x,C,A,S):ue(c,u,y,x,C,A,S)},K=(c,u,g,w,y,x,C,A)=>{let S,_;const{props:H,shapeFlag:O,transition:k,dirs:j}=c;if(S=c.el=o(c.type,x,H&&H.is,H),O&8?d(S,c.children):O&16&&pe(c.children,S,null,w,y,os(c,x),C,A),j&&xt(c,null,w,"created"),z(S,c,c.scopeId,C,w),H){for(const oe in H)oe!=="value"&&!sn(oe)&&i(S,oe,null,H[oe],x,w);"value"in H&&i(S,"value",null,H.value,x),(_=H.onVnodeBeforeMount)&&Ye(_,w,c)}j&&xt(c,null,w,"beforeMount");const W=ef(y,k);W&&k.beforeEnter(S),s(S,u,g),((_=H&&H.onVnodeMounted)||W||j)&&$e(()=>{_&&Ye(_,w,c),W&&k.enter(S),j&&xt(c,null,w,"mounted")},y)},z=(c,u,g,w,y)=>{if(g&&m(c,g),w)for(let x=0;x<w.length;x++)m(c,w[x]);if(y){let x=y.subTree;if(u===x||io(x.type)&&(x.ssContent===u||x.ssFallback===u)){const C=y.vnode;z(c,C,C.scopeId,C.slotScopeIds,y.parent)}}},pe=(c,u,g,w,y,x,C,A,S=0)=>{for(let _=S;_<c.length;_++){const H=c[_]=A?ht(c[_]):Ue(c[_]);T(null,H,u,g,w,y,x,C,A)}},ue=(c,u,g,w,y,x,C)=>{const A=u.el=c.el;let{patchFlag:S,dynamicChildren:_,dirs:H}=u;S|=c.patchFlag&16;const O=c.props||ie,k=u.props||ie;let j;if(g&&_t(g,!1),(j=k.onVnodeBeforeUpdate)&&Ye(j,g,u,c),H&&xt(u,c,g,"beforeUpdate"),g&&_t(g,!0),(O.innerHTML&&k.innerHTML==null||O.textContent&&k.textContent==null)&&d(A,""),_?le(c.dynamicChildren,_,A,g,w,os(u,y),x):C||Q(c,u,A,null,g,w,os(u,y),x,!1),S>0){if(S&16)we(A,O,k,g,y);else if(S&2&&O.class!==k.class&&i(A,"class",null,k.class,y),S&4&&i(A,"style",O.style,k.style,y),S&8){const W=u.dynamicProps;for(let oe=0;oe<W.length;oe++){const ne=W[oe],Oe=O[ne],xe=k[ne];(xe!==Oe||ne==="value")&&i(A,ne,Oe,xe,y,g)}}S&1&&c.children!==u.children&&d(A,u.children)}else!C&&_==null&&we(A,O,k,g,y);((j=k.onVnodeUpdated)||H)&&$e(()=>{j&&Ye(j,g,u,c),H&&xt(u,c,g,"updated")},w)},le=(c,u,g,w,y,x,C)=>{for(let A=0;A<u.length;A++){const S=c[A],_=u[A],H=S.el&&(S.type===ge||!gt(S,_)||S.shapeFlag&70)?a(S.el):g;T(S,_,H,null,w,y,x,C,!0)}},we=(c,u,g,w,y)=>{if(u!==g){if(u!==ie)for(const x in u)!sn(x)&&!(x in g)&&i(c,x,u[x],null,y,w);for(const x in g){if(sn(x))continue;const C=g[x],A=u[x];C!==A&&x!=="value"&&i(c,x,A,C,y,w)}"value"in g&&i(c,"value",u.value,g.value,y)}},be=(c,u,g,w,y,x,C,A,S)=>{const _=u.el=c?c.el:l(""),H=u.anchor=c?c.anchor:l("");let{patchFlag:O,dynamicChildren:k,slotScopeIds:j}=u;j&&(A=A?A.concat(j):j),c==null?(s(_,g,w),s(H,g,w),pe(u.children||[],g,H,y,x,C,A,S)):O>0&&O&64&&k&&c.dynamicChildren?(le(c.dynamicChildren,k,g,y,x,C,A),(u.key!=null||y&&u===y.subTree)&&eo(c,u,!0)):Q(c,u,g,H,y,x,C,A,S)},ye=(c,u,g,w,y,x,C,A,S)=>{u.slotScopeIds=A,c==null?u.shapeFlag&512?y.ctx.activate(u,g,w,C,S):Fe(u,g,w,y,x,C,S):Le(c,u,S)},Fe=(c,u,g,w,y,x,C)=>{const A=c.component=Af(c,w,y);if(Li(c)&&(A.ctx.renderer=B),Rf(A,!1,C),A.asyncDep){if(y&&y.registerDep(A,fe,C),!c.el){const S=A.subTree=de(lt);F(null,S,u,g)}}else fe(A,c,u,g,y,x,C)},Le=(c,u,g)=>{const w=u.component=c.component;if(uf(c,u,g))if(w.asyncDep&&!w.asyncResolved){J(w,u,g);return}else w.next=u,w.update();else u.el=c.el,w.vnode=u},fe=(c,u,g,w,y,x,C)=>{const A=()=>{if(c.isMounted){let{next:O,bu:k,u:j,parent:W,vnode:oe}=c;{const Ie=to(c);if(Ie){O&&(O.el=oe.el,J(c,O,C)),Ie.asyncDep.then(()=>{c.isUnmounted||A()});return}}let ne=O,Oe;_t(c,!1),O?(O.el=oe.el,J(c,O,C)):O=oe,k&&On(k),(Oe=O.props&&O.props.onVnodeBeforeUpdate)&&Ye(Oe,W,O,oe),_t(c,!0);const xe=ls(c),je=c.subTree;c.subTree=xe,T(je,xe,a(je.el),v(je),c,y,x),O.el=xe.el,ne===null&&tr(c,xe.el),j&&$e(j,y),(Oe=O.props&&O.props.onVnodeUpdated)&&$e(()=>Ye(Oe,W,O,oe),y)}else{let O;const{el:k,props:j}=u,{bm:W,m:oe,parent:ne,root:Oe,type:xe}=c,je=on(u);if(_t(c,!1),W&&On(W),!je&&(O=j&&j.onVnodeBeforeMount)&&Ye(O,ne,u),_t(c,!0),k&&ae){const Ie=()=>{c.subTree=ls(c),ae(k,c.subTree,c,y,null)};je&&xe.__asyncHydrate?xe.__asyncHydrate(k,c,Ie):Ie()}else{Oe.ce&&Oe.ce._injectChildStyle(xe);const Ie=c.subTree=ls(c);T(null,Ie,g,w,c,y,x),u.el=Ie.el}if(oe&&$e(oe,y),!je&&(O=j&&j.onVnodeMounted)){const Ie=u;$e(()=>Ye(O,ne,Ie),y)}(u.shapeFlag&256||ne&&on(ne.vnode)&&ne.vnode.shapeFlag&256)&&c.a&&$e(c.a,y),c.isMounted=!0,u=g=w=null}};c.scope.on();const S=c.effect=new gi(A);c.scope.off();const _=c.update=S.run.bind(S),H=c.job=S.runIfDirty.bind(S);H.i=c,H.id=c.uid,S.scheduler=()=>Qs(H),_t(c,!0),_()},J=(c,u,g)=>{u.component=c;const w=c.vnode.props;c.vnode=u,c.next=null,Gl(c,u.props,w,g),Ql(c,u.children,g),bt(),gr(c),vt()},Q=(c,u,g,w,y,x,C,A,S=!1)=>{const _=c&&c.children,H=c?c.shapeFlag:0,O=u.children,{patchFlag:k,shapeFlag:j}=u;if(k>0){if(k&128){ct(_,O,g,w,y,x,C,A,S);return}else if(k&256){tt(_,O,g,w,y,x,C,A,S);return}}j&8?(H&16&&De(_,y,x),O!==_&&d(g,O)):H&16?j&16?ct(_,O,g,w,y,x,C,A,S):De(_,y,x,!0):(H&8&&d(g,""),j&16&&pe(O,g,w,y,x,C,A,S))},tt=(c,u,g,w,y,x,C,A,S)=>{c=c||Ft,u=u||Ft;const _=c.length,H=u.length,O=Math.min(_,H);let k;for(k=0;k<O;k++){const j=u[k]=S?ht(u[k]):Ue(u[k]);T(c[k],j,g,null,y,x,C,A,S)}_>H?De(c,y,x,!0,!1,O):pe(u,g,w,y,x,C,A,S,O)},ct=(c,u,g,w,y,x,C,A,S)=>{let _=0;const H=u.length;let O=c.length-1,k=H-1;for(;_<=O&&_<=k;){const j=c[_],W=u[_]=S?ht(u[_]):Ue(u[_]);if(gt(j,W))T(j,W,g,null,y,x,C,A,S);else break;_++}for(;_<=O&&_<=k;){const j=c[O],W=u[k]=S?ht(u[k]):Ue(u[k]);if(gt(j,W))T(j,W,g,null,y,x,C,A,S);else break;O--,k--}if(_>O){if(_<=k){const j=k+1,W=j<H?u[j].el:w;for(;_<=k;)T(null,u[_]=S?ht(u[_]):Ue(u[_]),g,W,y,x,C,A,S),_++}}else if(_>k)for(;_<=O;)Pe(c[_],y,x,!0),_++;else{const j=_,W=_,oe=new Map;for(_=W;_<=k;_++){const Me=u[_]=S?ht(u[_]):Ue(u[_]);Me.key!=null&&oe.set(Me.key,_)}let ne,Oe=0;const xe=k-W+1;let je=!1,Ie=0;const Zt=new Array(xe);for(_=0;_<xe;_++)Zt[_]=0;for(_=j;_<=O;_++){const Me=c[_];if(Oe>=xe){Pe(Me,y,x,!0);continue}let Je;if(Me.key!=null)Je=oe.get(Me.key);else for(ne=W;ne<=k;ne++)if(Zt[ne-W]===0&&gt(Me,u[ne])){Je=ne;break}Je===void 0?Pe(Me,y,x,!0):(Zt[Je-W]=_+1,Je>=Ie?Ie=Je:je=!0,T(Me,u[Je],g,null,y,x,C,A,S),Oe++)}const or=je?tf(Zt):Ft;for(ne=or.length-1,_=xe-1;_>=0;_--){const Me=W+_,Je=u[Me],lr=Me+1<H?u[Me+1].el:w;Zt[_]===0?T(null,Je,g,lr,y,x,C,A,S):je&&(ne<0||_!==or[ne]?qe(Je,g,lr,2):ne--)}}},qe=(c,u,g,w,y=null)=>{const{el:x,type:C,transition:A,children:S,shapeFlag:_}=c;if(_&6){qe(c.component.subTree,u,g,w);return}if(_&128){c.suspense.move(u,g,w);return}if(_&64){C.move(c,u,g,B);return}if(C===ge){s(x,u,g);for(let O=0;O<S.length;O++)qe(S[O],u,g,w);s(c.anchor,u,g);return}if(C===fs){D(c,u,g);return}if(w!==2&&_&1&&A)if(w===0)A.beforeEnter(x),s(x,u,g),$e(()=>A.enter(x),y);else{const{leave:O,delayLeave:k,afterLeave:j}=A,W=()=>s(x,u,g),oe=()=>{O(x,()=>{W(),j&&j()})};k?k(x,W,oe):oe()}else s(x,u,g)},Pe=(c,u,g,w=!1,y=!1)=>{const{type:x,props:C,ref:A,children:S,dynamicChildren:_,shapeFlag:H,patchFlag:O,dirs:k,cacheIndex:j}=c;if(O===-2&&(y=!1),A!=null&&xs(A,null,g,c,!0),j!=null&&(u.renderCache[j]=void 0),H&256){u.ctx.deactivate(c);return}const W=H&1&&k,oe=!on(c);let ne;if(oe&&(ne=C&&C.onVnodeBeforeUnmount)&&Ye(ne,u,c),H&6)En(c.component,g,w);else{if(H&128){c.suspense.unmount(g,w);return}W&&xt(c,null,u,"beforeUnmount"),H&64?c.type.remove(c,u,g,B,w):_&&!_.hasOnce&&(x!==ge||O>0&&O&64)?De(_,u,g,!1,!0):(x===ge&&O&384||!y&&H&16)&&De(S,u,g),w&&Ot(c)}(oe&&(ne=C&&C.onVnodeUnmounted)||W)&&$e(()=>{ne&&Ye(ne,u,c),W&&xt(c,null,u,"unmounted")},g)},Ot=c=>{const{type:u,el:g,anchor:w,transition:y}=c;if(u===ge){It(g,w);return}if(u===fs){N(c);return}const x=()=>{r(g),y&&!y.persisted&&y.afterLeave&&y.afterLeave()};if(c.shapeFlag&1&&y&&!y.persisted){const{leave:C,delayLeave:A}=y,S=()=>C(g,x);A?A(c.el,x,S):S()}else x()},It=(c,u)=>{let g;for(;c!==u;)g=p(c),r(c),c=g;r(u)},En=(c,u,g)=>{const{bum:w,scope:y,job:x,subTree:C,um:A,m:S,a:_}=c;_r(S),_r(_),w&&On(w),y.stop(),x&&(x.flags|=8,Pe(C,c,u,g)),A&&$e(A,u),$e(()=>{c.isUnmounted=!0},u),u&&u.pendingBranch&&!u.isUnmounted&&c.asyncDep&&!c.asyncResolved&&c.suspenseId===u.pendingId&&(u.deps--,u.deps===0&&u.resolve())},De=(c,u,g,w=!1,y=!1,x=0)=>{for(let C=x;C<c.length;C++)Pe(c[C],u,g,w,y)},v=c=>{if(c.shapeFlag&6)return v(c.component.subTree);if(c.shapeFlag&128)return c.suspense.next();const u=p(c.anchor||c.el),g=u&&u[xl];return g?p(g):u};let I=!1;const P=(c,u,g)=>{c==null?u._vnode&&Pe(u._vnode,null,null,!0):T(u._vnode||null,c,u,null,null,null,g),u._vnode=c,I||(I=!0,gr(),Fi(),I=!1)},B={p:T,um:Pe,m:qe,r:Ot,mt:Fe,mc:pe,pc:Q,pbc:le,n:v,o:e};let te,ae;return{render:P,hydrate:te,createApp:zl(P,te)}}function os({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function _t({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function ef(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function eo(e,t,n=!1){const s=e.children,r=t.children;if(L(s)&&L(r))for(let i=0;i<s.length;i++){const o=s[i];let l=r[i];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=r[i]=ht(r[i]),l.el=o.el),!n&&l.patchFlag!==-2&&eo(o,l)),l.type===Jn&&(l.el=o.el)}}function tf(e){const t=e.slice(),n=[0];let s,r,i,o,l;const f=e.length;for(s=0;s<f;s++){const h=e[s];if(h!==0){if(r=n[n.length-1],e[r]<h){t[s]=r,n.push(s);continue}for(i=0,o=n.length-1;i<o;)l=i+o>>1,e[n[l]]<h?i=l+1:o=l;h<e[n[i]]&&(i>0&&(t[s]=n[i-1]),n[i]=s)}}for(i=n.length,o=n[i-1];i-- >0;)n[i]=o,o=t[o];return n}function to(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:to(t)}function _r(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const nf=Symbol.for("v-scx"),sf=()=>Xe(nf);function Mn(e,t,n){return no(e,t,n)}function no(e,t,n=ie){const{immediate:s,deep:r,flush:i,once:o}=n,l=ve({},n);let f;if(Yn)if(i==="sync"){const p=sf();f=p.__watcherHandles||(p.__watcherHandles=[])}else if(!t||s)l.once=!0;else{const p=()=>{};return p.stop=Ze,p.resume=Ze,p.pause=Ze,p}const h=Ee;l.call=(p,m,R)=>et(p,h,m,R);let d=!1;i==="post"?l.scheduler=p=>{$e(p,h&&h.suspense)}:i!=="sync"&&(d=!0,l.scheduler=(p,m)=>{m?p():Qs(p)}),l.augmentJob=p=>{t&&(p.flags|=4),d&&(p.flags|=2,h&&(p.id=h.uid,p.i=h))};const a=bl(e,t,l);return f&&f.push(a),a}function rf(e,t,n){const s=this.proxy,r=he(e)?e.includes(".")?so(s,e):()=>s[e]:e.bind(s,s);let i;U(t)?i=t:(i=t.handler,n=t);const o=xn(this),l=no(r,i.bind(s),n);return o(),l}function so(e,t){const n=t.split(".");return()=>{let s=e;for(let r=0;r<n.length&&s;r++)s=s[n[r]];return s}}const of=(e,t)=>t==="modelValue"||t==="model-value"?e.modelModifiers:e[`${t}Modifiers`]||e[`${We(t)}Modifiers`]||e[`${Pt(t)}Modifiers`];function lf(e,t,...n){if(e.isUnmounted)return;const s=e.vnode.props||ie;let r=n;const i=t.startsWith("update:"),o=i&&of(s,t.slice(7));o&&(o.trim&&(r=n.map(d=>he(d)?d.trim():d)),o.number&&(r=n.map(gs)));let l,f=s[l=es(t)]||s[l=es(We(t))];!f&&i&&(f=s[l=es(Pt(t))]),f&&et(f,e,6,r);const h=s[l+"Once"];if(h){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,et(h,e,6,r)}}function ro(e,t,n=!1){const s=t.emitsCache,r=s.get(e);if(r!==void 0)return r;const i=e.emits;let o={},l=!1;if(!U(e)){const f=h=>{const d=ro(h,t,!0);d&&(l=!0,ve(o,d))};!n&&t.mixins.length&&t.mixins.forEach(f),e.extends&&f(e.extends),e.mixins&&e.mixins.forEach(f)}return!i&&!l?(ce(e)&&s.set(e,null),null):(L(i)?i.forEach(f=>o[f]=null):ve(o,i),ce(e)&&s.set(e,o),o)}function qn(e,t){return!e||!Ln(t)?!1:(t=t.slice(2).replace(/Once$/,""),Z(e,t[0].toLowerCase()+t.slice(1))||Z(e,Pt(t))||Z(e,t))}function ls(e){const{type:t,vnode:n,proxy:s,withProxy:r,propsOptions:[i],slots:o,attrs:l,emit:f,render:h,renderCache:d,props:a,data:p,setupState:m,ctx:R,inheritAttrs:T}=e,V=Fn(e);let F,M;try{if(n.shapeFlag&4){const N=r||s,$=N;F=Ue(h.call($,N,d,a,m,p,R)),M=l}else{const N=t;F=Ue(N.length>1?N(a,{attrs:l,slots:o,emit:f}):N(a,null)),M=t.props?l:cf(l)}}catch(N){fn.length=0,wn(N,e,1),F=de(lt)}let D=F;if(M&&T!==!1){const N=Object.keys(M),{shapeFlag:$}=D;N.length&&$&7&&(i&&N.some(Fs)&&(M=af(M,i)),D=qt(D,M,!1,!0))}return n.dirs&&(D=qt(D,null,!1,!0),D.dirs=D.dirs?D.dirs.concat(n.dirs):n.dirs),n.transition&&Zs(D,n.transition),F=D,Fn(V),F}function ff(e,t=!0){let n;for(let s=0;s<e.length;s++){const r=e[s];if(kn(r)){if(r.type!==lt||r.children==="v-if"){if(n)return;n=r}}else return}return n}const cf=e=>{let t;for(const n in e)(n==="class"||n==="style"||Ln(n))&&((t||(t={}))[n]=e[n]);return t},af=(e,t)=>{const n={};for(const s in e)(!Fs(s)||!(s.slice(9)in t))&&(n[s]=e[s]);return n};function uf(e,t,n){const{props:s,children:r,component:i}=e,{props:o,children:l,patchFlag:f}=t,h=i.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&f>=0){if(f&1024)return!0;if(f&16)return s?Er(s,o,h):!!o;if(f&8){const d=t.dynamicProps;for(let a=0;a<d.length;a++){const p=d[a];if(o[p]!==s[p]&&!qn(h,p))return!0}}}else return(r||l)&&(!l||!l.$stable)?!0:s===o?!1:s?o?Er(s,o,h):!0:!!o;return!1}function Er(e,t,n){const s=Object.keys(t);if(s.length!==Object.keys(e).length)return!0;for(let r=0;r<s.length;r++){const i=s[r];if(t[i]!==e[i]&&!qn(n,i))return!0}return!1}function tr({vnode:e,parent:t},n){for(;t;){const s=t.subTree;if(s.suspense&&s.suspense.activeBranch===e&&(s.el=e.el),s===e)(e=t.vnode).el=n,t=t.parent;else break}}const io=e=>e.__isSuspense;let Rs=0;const df={name:"Suspense",__isSuspense:!0,process(e,t,n,s,r,i,o,l,f,h){if(e==null)pf(t,n,s,r,i,o,l,f,h);else{if(i&&i.deps>0&&!e.suspense.isInFallback){t.suspense=e.suspense,t.suspense.vnode=t,t.el=e.el;return}gf(e,t,n,s,r,o,l,f,h)}},hydrate:mf,normalize:yf},hf=df;function mn(e,t){const n=e.props&&e.props[t];U(n)&&n()}function pf(e,t,n,s,r,i,o,l,f){const{p:h,o:{createElement:d}}=f,a=d("div"),p=e.suspense=oo(e,r,s,t,a,n,i,o,l,f);h(null,p.pendingBranch=e.ssContent,a,null,s,p,i,o),p.deps>0?(mn(e,"onPending"),mn(e,"onFallback"),h(null,e.ssFallback,t,n,s,null,i,o),Kt(p,e.ssFallback)):p.resolve(!1,!0)}function gf(e,t,n,s,r,i,o,l,{p:f,um:h,o:{createElement:d}}){const a=t.suspense=e.suspense;a.vnode=t,t.el=e.el;const p=t.ssContent,m=t.ssFallback,{activeBranch:R,pendingBranch:T,isInFallback:V,isHydrating:F}=a;if(T)a.pendingBranch=p,gt(p,T)?(f(T,p,a.hiddenContainer,null,r,a,i,o,l),a.deps<=0?a.resolve():V&&(F||(f(R,m,n,s,r,null,i,o,l),Kt(a,m)))):(a.pendingId=Rs++,F?(a.isHydrating=!1,a.activeBranch=T):h(T,r,a),a.deps=0,a.effects.length=0,a.hiddenContainer=d("div"),V?(f(null,p,a.hiddenContainer,null,r,a,i,o,l),a.deps<=0?a.resolve():(f(R,m,n,s,r,null,i,o,l),Kt(a,m))):R&&gt(p,R)?(f(R,p,n,s,r,a,i,o,l),a.resolve(!0)):(f(null,p,a.hiddenContainer,null,r,a,i,o,l),a.deps<=0&&a.resolve()));else if(R&&gt(p,R))f(R,p,n,s,r,a,i,o,l),Kt(a,p);else if(mn(t,"onPending"),a.pendingBranch=p,p.shapeFlag&512?a.pendingId=p.component.suspenseId:a.pendingId=Rs++,f(null,p,a.hiddenContainer,null,r,a,i,o,l),a.deps<=0)a.resolve();else{const{timeout:M,pendingId:D}=a;M>0?setTimeout(()=>{a.pendingId===D&&a.fallback(m)},M):M===0&&a.fallback(m)}}function oo(e,t,n,s,r,i,o,l,f,h,d=!1){const{p:a,m:p,um:m,n:R,o:{parentNode:T,remove:V}}=h;let F;const M=vf(e);M&&t&&t.pendingBranch&&(F=t.pendingId,t.deps++);const D=e.props?Bo(e.props.timeout):void 0,N=i,$={vnode:e,parent:t,parentComponent:n,namespace:o,container:s,hiddenContainer:r,deps:0,pendingId:Rs++,timeout:typeof D=="number"?D:-1,activeBranch:null,pendingBranch:null,isInFallback:!d,isHydrating:d,isUnmounted:!1,effects:[],resolve(K=!1,z=!1){const{vnode:pe,activeBranch:ue,pendingBranch:le,pendingId:we,effects:be,parentComponent:ye,container:Fe}=$;let Le=!1;$.isHydrating?$.isHydrating=!1:K||(Le=ue&&le.transition&&le.transition.mode==="out-in",Le&&(ue.transition.afterLeave=()=>{we===$.pendingId&&(p(le,Fe,i===N?R(ue):i,0),ws(be))}),ue&&(T(ue.el)===Fe&&(i=R(ue)),m(ue,ye,$,!0)),Le||p(le,Fe,i,0)),Kt($,le),$.pendingBranch=null,$.isInFallback=!1;let fe=$.parent,J=!1;for(;fe;){if(fe.pendingBranch){fe.effects.push(...be),J=!0;break}fe=fe.parent}!J&&!Le&&ws(be),$.effects=[],M&&t&&t.pendingBranch&&F===t.pendingId&&(t.deps--,t.deps===0&&!z&&t.resolve()),mn(pe,"onResolve")},fallback(K){if(!$.pendingBranch)return;const{vnode:z,activeBranch:pe,parentComponent:ue,container:le,namespace:we}=$;mn(z,"onFallback");const be=R(pe),ye=()=>{$.isInFallback&&(a(null,K,le,be,ue,null,we,l,f),Kt($,K))},Fe=K.transition&&K.transition.mode==="out-in";Fe&&(pe.transition.afterLeave=ye),$.isInFallback=!0,m(pe,ue,null,!0),Fe||ye()},move(K,z,pe){$.activeBranch&&p($.activeBranch,K,z,pe),$.container=K},next(){return $.activeBranch&&R($.activeBranch)},registerDep(K,z,pe){const ue=!!$.pendingBranch;ue&&$.deps++;const le=K.vnode.el;K.asyncDep.catch(we=>{wn(we,K,0)}).then(we=>{if(K.isUnmounted||$.isUnmounted||$.pendingId!==K.suspenseId)return;K.asyncResolved=!0;const{vnode:be}=K;Ts(K,we,!1),le&&(be.el=le);const ye=!le&&K.subTree.el;z(K,be,T(le||K.subTree.el),le?null:R(K.subTree),$,o,pe),ye&&V(ye),tr(K,be.el),ue&&--$.deps===0&&$.resolve()})},unmount(K,z){$.isUnmounted=!0,$.activeBranch&&m($.activeBranch,n,K,z),$.pendingBranch&&m($.pendingBranch,n,K,z)}};return $}function mf(e,t,n,s,r,i,o,l,f){const h=t.suspense=oo(t,s,n,e.parentNode,document.createElement("div"),null,r,i,o,l,!0),d=f(e,h.pendingBranch=t.ssContent,n,h,i,o);return h.deps===0&&h.resolve(!1,!0),d}function yf(e){const{shapeFlag:t,children:n}=e,s=t&32;e.ssContent=Sr(s?n.default:n),e.ssFallback=s?Sr(n.fallback):de(lt)}function Sr(e){let t;if(U(e)){const n=Gt&&e._c;n&&(e._d=!1,G()),e=e(),n&&(e._d=!0,t=Te,lo())}return L(e)&&(e=ff(e)),e=Ue(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter(n=>n!==e)),e}function bf(e,t){t&&t.pendingBranch?L(e)?t.effects.push(...e):t.effects.push(e):ws(e)}function Kt(e,t){e.activeBranch=t;const{vnode:n,parentComponent:s}=e;let r=t.el;for(;!r&&t.component;)t=t.component.subTree,r=t.el;n.el=r,s&&s.subTree===n&&(s.vnode.el=r,tr(s,r))}function vf(e){const t=e.props&&e.props.suspensible;return t!=null&&t!==!1}const ge=Symbol.for("v-fgt"),Jn=Symbol.for("v-txt"),lt=Symbol.for("v-cmt"),fs=Symbol.for("v-stc"),fn=[];let Te=null;function G(e=!1){fn.push(Te=e?null:[])}function lo(){fn.pop(),Te=fn[fn.length-1]||null}let Gt=1;function Ar(e){Gt+=e,e<0&&Te&&(Te.hasOnce=!0)}function fo(e){return e.dynamicChildren=Gt>0?Te||Ft:null,lo(),Gt>0&&Te&&Te.push(e),e}function X(e,t,n,s,r,i){return fo(b(e,t,n,s,r,i,!0))}function Cs(e,t,n,s,r){return fo(de(e,t,n,s,r,!0))}function kn(e){return e?e.__v_isVNode===!0:!1}function gt(e,t){return e.type===t.type&&e.key===t.key}const co=({key:e})=>e??null,$n=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?he(e)||Se(e)||U(e)?{i:Be,r:e,k:t,f:!!n}:e:null);function b(e,t=null,n=null,s=0,r=null,i=e===ge?0:1,o=!1,l=!1){const f={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&co(t),ref:t&&$n(t),scopeId:ki,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:s,dynamicProps:r,dynamicChildren:null,appContext:null,ctx:Be};return l?(nr(f,n),i&128&&e.normalize(f)):n&&(f.shapeFlag|=he(n)?8:16),Gt>0&&!o&&Te&&(f.patchFlag>0||i&6)&&f.patchFlag!==32&&Te.push(f),f}const de=wf;function wf(e,t=null,n=null,s=0,r=null,i=!1){if((!e||e===Fl)&&(e=lt),kn(e)){const l=qt(e,t,!0);return n&&nr(l,n),Gt>0&&!i&&Te&&(l.shapeFlag&6?Te[Te.indexOf(e)]=l:Te.push(l)),l.patchFlag=-2,l}if(If(e)&&(e=e.__vccOpts),t){t=xf(t);let{class:l,style:f}=t;l&&!he(l)&&(t.class=Ls(l)),ce(f)&&(qs(f)&&!L(f)&&(f=ve({},f)),t.style=Hs(f))}const o=he(e)?1:io(e)?128:_l(e)?64:ce(e)?4:U(e)?2:0;return b(e,t,n,s,r,o,i,!0)}function xf(e){return e?qs(e)||Gi(e)?ve({},e):e:null}function qt(e,t,n=!1,s=!1){const{props:r,ref:i,patchFlag:o,children:l,transition:f}=e,h=t?_f(r||{},t):r,d={__v_isVNode:!0,__v_skip:!0,type:e.type,props:h,key:h&&co(h),ref:t&&t.ref?n&&i?L(i)?i.concat($n(t)):[i,$n(t)]:$n(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==ge?o===-1?16:o|16:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:f,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&qt(e.ssContent),ssFallback:e.ssFallback&&qt(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return f&&s&&Zs(d,f.clone(d)),d}function E(e=" ",t=0){return de(Jn,null,e,t)}function Ke(e="",t=!1){return t?(G(),Cs(lt,null,e)):de(lt,null,e)}function Ue(e){return e==null||typeof e=="boolean"?de(lt):L(e)?de(ge,null,e.slice()):typeof e=="object"?ht(e):de(Jn,null,String(e))}function ht(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:qt(e)}function nr(e,t){let n=0;const{shapeFlag:s}=e;if(t==null)t=null;else if(L(t))n=16;else if(typeof t=="object")if(s&65){const r=t.default;r&&(r._c&&(r._d=!1),nr(e,r()),r._c&&(r._d=!0));return}else{n=32;const r=t._;!r&&!Gi(t)?t._ctx=Be:r===3&&Be&&(Be.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else U(t)?(t={default:t,_ctx:Be},n=32):(t=String(t),s&64?(n=16,t=[E(t)]):n=8);e.children=t,e.shapeFlag|=n}function _f(...e){const t={};for(let n=0;n<e.length;n++){const s=e[n];for(const r in s)if(r==="class")t.class!==s.class&&(t.class=Ls([t.class,s.class]));else if(r==="style")t.style=Hs([t.style,s.style]);else if(Ln(r)){const i=t[r],o=s[r];o&&i!==o&&!(L(i)&&i.includes(o))&&(t[r]=i?[].concat(i,o):o)}else r!==""&&(t[r]=s[r])}return t}function Ye(e,t,n,s=null){et(e,t,7,[n,s])}const Ef=Ki();let Sf=0;function Af(e,t,n){const s=e.type,r=(t?t.appContext:e.appContext)||Ef,i={uid:Sf++,vnode:e,type:s,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Uo(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ji(s,r),emitsOptions:ro(s,r),emit:null,emitted:null,propsDefaults:ie,inheritAttrs:s.inheritAttrs,ctx:ie,data:ie,props:ie,attrs:ie,slots:ie,refs:ie,setupState:ie,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=lf.bind(null,i),e.ce&&e.ce(i),i}let Ee=null,Hn,Ps;{const e=ui(),t=(n,s)=>{let r;return(r=e[n])||(r=e[n]=[]),r.push(s),i=>{r.length>1?r.forEach(o=>o(i)):r[0](i)}};Hn=t("__VUE_INSTANCE_SETTERS__",n=>Ee=n),Ps=t("__VUE_SSR_SETTERS__",n=>Yn=n)}const xn=e=>{const t=Ee;return Hn(e),e.scope.on(),()=>{e.scope.off(),Hn(t)}},Rr=()=>{Ee&&Ee.scope.off(),Hn(null)};function ao(e){return e.vnode.shapeFlag&4}let Yn=!1;function Rf(e,t=!1,n=!1){t&&Ps(t);const{props:s,children:r}=e.vnode,i=ao(e);Wl(e,s,i,t),Yl(e,r,n);const o=i?Cf(e,t):void 0;return t&&Ps(!1),o}function Cf(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,kl);const{setup:s}=n;if(s){const r=e.setupContext=s.length>1?Tf(e):null,i=xn(e);bt();const o=vn(s,e,0,[e.props,r]);if(vt(),i(),li(o)){if(on(e)||Hi(e),o.then(Rr,Rr),t)return o.then(l=>{Ts(e,l,t)}).catch(l=>{wn(l,e,0)});e.asyncDep=o}else Ts(e,o,t)}else uo(e,t)}function Ts(e,t,n){U(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:ce(t)&&(e.setupState=Mi(t)),uo(e,n)}let Cr;function uo(e,t,n){const s=e.type;if(!e.render){if(!t&&Cr&&!s.render){const r=s.template||Xs(e).template;if(r){const{isCustomElement:i,compilerOptions:o}=e.appContext.config,{delimiters:l,compilerOptions:f}=s,h=ve(ve({isCustomElement:i,delimiters:l},o),f);s.render=Cr(r,h)}}e.render=s.render||Ze}{const r=xn(e);bt();try{Hl(e)}finally{vt(),r()}}}const Pf={get(e,t){return Ae(e,"get",""),e[t]}};function Tf(e){const t=n=>{e.exposed=n||{}};return{attrs:new Proxy(e.attrs,Pf),slots:e.slots,emit:e.emit,expose:t}}function Qn(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(Mi(ul(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in ln)return ln[n](e)},has(t,n){return n in t||n in ln}})):e.proxy}function Of(e,t=!0){return U(e)?e.displayName||e.name:e.name||t&&e.__name}function If(e){return U(e)&&"__vccOpts"in e}const Ve=(e,t)=>ml(e,t,Yn);function ho(e,t,n){const s=arguments.length;return s===2?ce(t)&&!L(t)?kn(t)?de(e,null,[t]):de(e,t):de(e,null,t):(s>3?n=Array.prototype.slice.call(arguments,2):s===3&&kn(n)&&(n=[n]),de(e,t,n))}const Mf="3.5.6";/**
* @vue/runtime-dom v3.5.6
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Os;const Pr=typeof window<"u"&&window.trustedTypes;if(Pr)try{Os=Pr.createPolicy("vue",{createHTML:e=>e})}catch{}const po=Os?e=>Os.createHTML(e):e=>e,$f="http://www.w3.org/2000/svg",Nf="http://www.w3.org/1998/Math/MathML",rt=typeof document<"u"?document:null,Tr=rt&&rt.createElement("template"),Bf={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,s)=>{const r=t==="svg"?rt.createElementNS($f,e):t==="mathml"?rt.createElementNS(Nf,e):n?rt.createElement(e,{is:n}):rt.createElement(e);return e==="select"&&s&&s.multiple!=null&&r.setAttribute("multiple",s.multiple),r},createText:e=>rt.createTextNode(e),createComment:e=>rt.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>rt.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,s,r,i){const o=n?n.previousSibling:t.lastChild;if(r&&(r===i||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),!(r===i||!(r=r.nextSibling)););else{Tr.innerHTML=po(s==="svg"?`<svg>${e}</svg>`:s==="mathml"?`<math>${e}</math>`:e);const l=Tr.content;if(s==="svg"||s==="mathml"){const f=l.firstChild;for(;f.firstChild;)l.appendChild(f.firstChild);l.removeChild(f)}t.insertBefore(l,n)}return[o?o.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Ff=Symbol("_vtc");function Df(e,t,n){const s=e[Ff];s&&(t=(t?[t,...s]:[...s]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const Or=Symbol("_vod"),kf=Symbol("_vsh"),Hf=Symbol(""),Lf=/(^|;)\s*display\s*:/;function jf(e,t,n){const s=e.style,r=he(n);let i=!1;if(n&&!r){if(t)if(he(t))for(const o of t.split(";")){const l=o.slice(0,o.indexOf(":")).trim();n[l]==null&&Nn(s,l,"")}else for(const o in t)n[o]==null&&Nn(s,o,"");for(const o in n)o==="display"&&(i=!0),Nn(s,o,n[o])}else if(r){if(t!==n){const o=s[Hf];o&&(n+=";"+o),s.cssText=n,i=Lf.test(n)}}else t&&e.removeAttribute("style");Or in e&&(e[Or]=i?s.display:"",e[kf]&&(s.display="none"))}const Ir=/\s*!important$/;function Nn(e,t,n){if(L(n))n.forEach(s=>Nn(e,t,s));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const s=Uf(e,t);Ir.test(n)?e.setProperty(Pt(s),n.replace(Ir,""),"important"):e[s]=n}}const Mr=["Webkit","Moz","ms"],cs={};function Uf(e,t){const n=cs[t];if(n)return n;let s=We(t);if(s!=="filter"&&s in e)return cs[t]=s;s=Vn(s);for(let r=0;r<Mr.length;r++){const i=Mr[r]+s;if(i in e)return cs[t]=i}return t}const $r="http://www.w3.org/1999/xlink";function Nr(e,t,n,s,r,i=jo(t)){s&&t.startsWith("xlink:")?n==null?e.removeAttributeNS($r,t.slice(6,t.length)):e.setAttributeNS($r,t,n):n==null||i&&!di(n)?e.removeAttribute(t):e.setAttribute(t,i?"":yt(n)?String(n):n)}function Vf(e,t,n,s){if(t==="innerHTML"||t==="textContent"){n!=null&&(e[t]=t==="innerHTML"?po(n):n);return}const r=e.tagName;if(t==="value"&&r!=="PROGRESS"&&!r.includes("-")){const o=r==="OPTION"?e.getAttribute("value")||"":e.value,l=n==null?e.type==="checkbox"?"on":"":String(n);(o!==l||!("_value"in e))&&(e.value=l),n==null&&e.removeAttribute(t),e._value=n;return}let i=!1;if(n===""||n==null){const o=typeof e[t];o==="boolean"?n=di(n):n==null&&o==="string"?(n="",i=!0):o==="number"&&(n=0,i=!0)}try{e[t]=n}catch{}i&&e.removeAttribute(t)}function Nt(e,t,n,s){e.addEventListener(t,n,s)}function Kf(e,t,n,s){e.removeEventListener(t,n,s)}const Br=Symbol("_vei");function zf(e,t,n,s,r=null){const i=e[Br]||(e[Br]={}),o=i[t];if(s&&o)o.value=s;else{const[l,f]=Wf(t);if(s){const h=i[t]=Jf(s,r);Nt(e,l,h,f)}else o&&(Kf(e,l,o,f),i[t]=void 0)}}const Fr=/(?:Once|Passive|Capture)$/;function Wf(e){let t;if(Fr.test(e)){t={};let s;for(;s=e.match(Fr);)e=e.slice(0,e.length-s[0].length),t[s[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Pt(e.slice(2)),t]}let as=0;const Gf=Promise.resolve(),qf=()=>as||(Gf.then(()=>as=0),as=Date.now());function Jf(e,t){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;et(Yf(s,n.value),t,5,[s])};return n.value=e,n.attached=qf(),n}function Yf(e,t){if(L(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(s=>r=>!r._stopped&&s&&s(r))}else return t}const Dr=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,Qf=(e,t,n,s,r,i)=>{const o=r==="svg";t==="class"?Df(e,s,o):t==="style"?jf(e,n,s):Ln(t)?Fs(t)||zf(e,t,n,s,i):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Zf(e,t,s,o))?(Vf(e,t,s),!e.tagName.includes("-")&&(t==="value"||t==="checked"||t==="selected")&&Nr(e,t,s,o,i,t!=="value")):(t==="true-value"?e._trueValue=s:t==="false-value"&&(e._falseValue=s),Nr(e,t,s,o))};function Zf(e,t,n,s){if(s)return!!(t==="innerHTML"||t==="textContent"||t in e&&Dr(t)&&U(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const r=e.tagName;if(r==="IMG"||r==="VIDEO"||r==="CANVAS"||r==="SOURCE")return!1}return Dr(t)&&he(n)?!1:!!(t in e||e._isVueCE&&(/[A-Z]/.test(t)||!he(n)))}const kr=e=>{const t=e.props["onUpdate:modelValue"]||!1;return L(t)?n=>On(t,n):t};function Xf(e){e.target.composing=!0}function Hr(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const us=Symbol("_assign"),zt={created(e,{modifiers:{lazy:t,trim:n,number:s}},r){e[us]=kr(r);const i=s||r.props&&r.props.type==="number";Nt(e,t?"change":"input",o=>{if(o.target.composing)return;let l=e.value;n&&(l=l.trim()),i&&(l=gs(l)),e[us](l)}),n&&Nt(e,"change",()=>{e.value=e.value.trim()}),t||(Nt(e,"compositionstart",Xf),Nt(e,"compositionend",Hr),Nt(e,"change",Hr))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:s,trim:r,number:i}},o){if(e[us]=kr(o),e.composing)return;const l=(i||e.type==="number")&&!/^0\d/.test(e.value)?gs(e.value):e.value,f=t??"";l!==f&&(document.activeElement===e&&e.type!=="range"&&(s&&t===n||r&&e.value.trim()===f)||(e.value=f))}},ec=["ctrl","shift","alt","meta"],tc={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>ec.some(n=>e[`${n}Key`]&&!t.includes(n))},Wt=(e,t)=>{const n=e._withMods||(e._withMods={}),s=t.join(".");return n[s]||(n[s]=(r,...i)=>{for(let o=0;o<t.length;o++){const l=tc[t[o]];if(l&&l(r,t))return}return e(r,...i)})},nc=ve({patchProp:Qf},Bf);let Lr;function sc(){return Lr||(Lr=Zl(nc))}const rc=(...e)=>{const t=sc().createApp(...e),{mount:n}=t;return t.mount=s=>{const r=oc(s);if(!r)return;const i=t._component;!U(i)&&!i.render&&!i.template&&(i.template=r.innerHTML),r.nodeType===1&&(r.textContent="");const o=n(r,!1,ic(r));return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),o},t};function ic(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function oc(e){return he(e)?document.querySelector(e):e}const lc=wt({}),Qt=(e,t)=>{const n=e.__vccOpts||e;for(const[s,r]of t)n[s]=r;return n};function fc(e,t,n,s,r,i){const o=Ct("router-view");return G(),Cs(hf,{class:"App"},{default:jt(()=>[(G(),Cs(o,{key:e.$route.fullPath}))]),_:1})}const cc=Qt(lc,[["render",fc]]);/*!
  * vue-router v4.4.5
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const Bt=typeof document<"u";function go(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function ac(e){return e.__esModule||e[Symbol.toStringTag]==="Module"||e.default&&go(e.default)}const se=Object.assign;function ds(e,t){const n={};for(const s in t){const r=t[s];n[s]=Ge(r)?r.map(e):e(r)}return n}const cn=()=>{},Ge=Array.isArray,mo=/#/g,uc=/&/g,dc=/\//g,hc=/=/g,pc=/\?/g,yo=/\+/g,gc=/%5B/g,mc=/%5D/g,bo=/%5E/g,yc=/%60/g,vo=/%7B/g,bc=/%7C/g,wo=/%7D/g,vc=/%20/g;function sr(e){return encodeURI(""+e).replace(bc,"|").replace(gc,"[").replace(mc,"]")}function wc(e){return sr(e).replace(vo,"{").replace(wo,"}").replace(bo,"^")}function Is(e){return sr(e).replace(yo,"%2B").replace(vc,"+").replace(mo,"%23").replace(uc,"%26").replace(yc,"`").replace(vo,"{").replace(wo,"}").replace(bo,"^")}function xc(e){return Is(e).replace(hc,"%3D")}function _c(e){return sr(e).replace(mo,"%23").replace(pc,"%3F")}function Ec(e){return e==null?"":_c(e).replace(dc,"%2F")}function yn(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const Sc=/\/$/,Ac=e=>e.replace(Sc,"");function hs(e,t,n="/"){let s,r={},i="",o="";const l=t.indexOf("#");let f=t.indexOf("?");return l<f&&l>=0&&(f=-1),f>-1&&(s=t.slice(0,f),i=t.slice(f+1,l>-1?l:t.length),r=e(i)),l>-1&&(s=s||t.slice(0,l),o=t.slice(l,t.length)),s=Tc(s??t,n),{fullPath:s+(i&&"?")+i+o,path:s,query:r,hash:yn(o)}}function Rc(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function jr(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function Cc(e,t,n){const s=t.matched.length-1,r=n.matched.length-1;return s>-1&&s===r&&Jt(t.matched[s],n.matched[r])&&xo(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function Jt(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function xo(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!Pc(e[n],t[n]))return!1;return!0}function Pc(e,t){return Ge(e)?Ur(e,t):Ge(t)?Ur(t,e):e===t}function Ur(e,t){return Ge(t)?e.length===t.length&&e.every((n,s)=>n===t[s]):e.length===1&&e[0]===t}function Tc(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),s=e.split("/"),r=s[s.length-1];(r===".."||r===".")&&s.push("");let i=n.length-1,o,l;for(o=0;o<s.length;o++)if(l=s[o],l!==".")if(l==="..")i>1&&i--;else break;return n.slice(0,i).join("/")+"/"+s.slice(o).join("/")}const ut={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var bn;(function(e){e.pop="pop",e.push="push"})(bn||(bn={}));var an;(function(e){e.back="back",e.forward="forward",e.unknown=""})(an||(an={}));function Oc(e){if(!e)if(Bt){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Ac(e)}const Ic=/^[^#]+#/;function Mc(e,t){return e.replace(Ic,"#")+t}function $c(e,t){const n=document.documentElement.getBoundingClientRect(),s=e.getBoundingClientRect();return{behavior:t.behavior,left:s.left-n.left-(t.left||0),top:s.top-n.top-(t.top||0)}}const Zn=()=>({left:window.scrollX,top:window.scrollY});function Nc(e){let t;if("el"in e){const n=e.el,s=typeof n=="string"&&n.startsWith("#"),r=typeof n=="string"?s?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!r)return;t=$c(r,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function Vr(e,t){return(history.state?history.state.position-t:-1)+e}const Ms=new Map;function Bc(e,t){Ms.set(e,t)}function Fc(e){const t=Ms.get(e);return Ms.delete(e),t}let Dc=()=>location.protocol+"//"+location.host;function _o(e,t){const{pathname:n,search:s,hash:r}=t,i=e.indexOf("#");if(i>-1){let l=r.includes(e.slice(i))?e.slice(i).length:1,f=r.slice(l);return f[0]!=="/"&&(f="/"+f),jr(f,"")}return jr(n,e)+s+r}function kc(e,t,n,s){let r=[],i=[],o=null;const l=({state:p})=>{const m=_o(e,location),R=n.value,T=t.value;let V=0;if(p){if(n.value=m,t.value=p,o&&o===R){o=null;return}V=T?p.position-T.position:0}else s(m);r.forEach(F=>{F(n.value,R,{delta:V,type:bn.pop,direction:V?V>0?an.forward:an.back:an.unknown})})};function f(){o=n.value}function h(p){r.push(p);const m=()=>{const R=r.indexOf(p);R>-1&&r.splice(R,1)};return i.push(m),m}function d(){const{history:p}=window;p.state&&p.replaceState(se({},p.state,{scroll:Zn()}),"")}function a(){for(const p of i)p();i=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",d)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",d,{passive:!0}),{pauseListeners:f,listen:h,destroy:a}}function Kr(e,t,n,s=!1,r=!1){return{back:e,current:t,forward:n,replaced:s,position:window.history.length,scroll:r?Zn():null}}function Hc(e){const{history:t,location:n}=window,s={value:_o(e,n)},r={value:t.state};r.value||i(s.value,{back:null,current:s.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(f,h,d){const a=e.indexOf("#"),p=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+f:Dc()+e+f;try{t[d?"replaceState":"pushState"](h,"",p),r.value=h}catch(m){console.error(m),n[d?"replace":"assign"](p)}}function o(f,h){const d=se({},t.state,Kr(r.value.back,f,r.value.forward,!0),h,{position:r.value.position});i(f,d,!0),s.value=f}function l(f,h){const d=se({},r.value,t.state,{forward:f,scroll:Zn()});i(d.current,d,!0);const a=se({},Kr(s.value,f,null),{position:d.position+1},h);i(f,a,!1),s.value=f}return{location:s,state:r,push:l,replace:o}}function Lc(e){e=Oc(e);const t=Hc(e),n=kc(e,t.state,t.location,t.replace);function s(i,o=!0){o||n.pauseListeners(),history.go(i)}const r=se({location:"",base:e,go:s,createHref:Mc.bind(null,e)},t,n);return Object.defineProperty(r,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(r,"state",{enumerable:!0,get:()=>t.state.value}),r}function jc(e){return typeof e=="string"||e&&typeof e=="object"}function Eo(e){return typeof e=="string"||typeof e=="symbol"}const So=Symbol("");var zr;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(zr||(zr={}));function Yt(e,t){return se(new Error,{type:e,[So]:!0},t)}function st(e,t){return e instanceof Error&&So in e&&(t==null||!!(e.type&t))}const Wr="[^/]+?",Uc={sensitive:!1,strict:!1,start:!0,end:!0},Vc=/[.+*?^${}()[\]/\\]/g;function Kc(e,t){const n=se({},Uc,t),s=[];let r=n.start?"^":"";const i=[];for(const h of e){const d=h.length?[]:[90];n.strict&&!h.length&&(r+="/");for(let a=0;a<h.length;a++){const p=h[a];let m=40+(n.sensitive?.25:0);if(p.type===0)a||(r+="/"),r+=p.value.replace(Vc,"\\$&"),m+=40;else if(p.type===1){const{value:R,repeatable:T,optional:V,regexp:F}=p;i.push({name:R,repeatable:T,optional:V});const M=F||Wr;if(M!==Wr){m+=10;try{new RegExp(`(${M})`)}catch(N){throw new Error(`Invalid custom RegExp for param "${R}" (${M}): `+N.message)}}let D=T?`((?:${M})(?:/(?:${M}))*)`:`(${M})`;a||(D=V&&h.length<2?`(?:/${D})`:"/"+D),V&&(D+="?"),r+=D,m+=20,V&&(m+=-8),T&&(m+=-20),M===".*"&&(m+=-50)}d.push(m)}s.push(d)}if(n.strict&&n.end){const h=s.length-1;s[h][s[h].length-1]+=.7000000000000001}n.strict||(r+="/?"),n.end?r+="$":n.strict&&(r+="(?:/|$)");const o=new RegExp(r,n.sensitive?"":"i");function l(h){const d=h.match(o),a={};if(!d)return null;for(let p=1;p<d.length;p++){const m=d[p]||"",R=i[p-1];a[R.name]=m&&R.repeatable?m.split("/"):m}return a}function f(h){let d="",a=!1;for(const p of e){(!a||!d.endsWith("/"))&&(d+="/"),a=!1;for(const m of p)if(m.type===0)d+=m.value;else if(m.type===1){const{value:R,repeatable:T,optional:V}=m,F=R in h?h[R]:"";if(Ge(F)&&!T)throw new Error(`Provided param "${R}" is an array but it is not repeatable (* or + modifiers)`);const M=Ge(F)?F.join("/"):F;if(!M)if(V)p.length<2&&(d.endsWith("/")?d=d.slice(0,-1):a=!0);else throw new Error(`Missing required param "${R}"`);d+=M}}return d||"/"}return{re:o,score:s,keys:i,parse:l,stringify:f}}function zc(e,t){let n=0;for(;n<e.length&&n<t.length;){const s=t[n]-e[n];if(s)return s;n++}return e.length<t.length?e.length===1&&e[0]===80?-1:1:e.length>t.length?t.length===1&&t[0]===80?1:-1:0}function Ao(e,t){let n=0;const s=e.score,r=t.score;for(;n<s.length&&n<r.length;){const i=zc(s[n],r[n]);if(i)return i;n++}if(Math.abs(r.length-s.length)===1){if(Gr(s))return 1;if(Gr(r))return-1}return r.length-s.length}function Gr(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const Wc={type:0,value:""},Gc=/[a-zA-Z0-9_]/;function qc(e){if(!e)return[[]];if(e==="/")return[[Wc]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(m){throw new Error(`ERR (${n})/"${h}": ${m}`)}let n=0,s=n;const r=[];let i;function o(){i&&r.push(i),i=[]}let l=0,f,h="",d="";function a(){h&&(n===0?i.push({type:0,value:h}):n===1||n===2||n===3?(i.length>1&&(f==="*"||f==="+")&&t(`A repeatable param (${h}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:h,regexp:d,repeatable:f==="*"||f==="+",optional:f==="*"||f==="?"})):t("Invalid state to consume buffer"),h="")}function p(){h+=f}for(;l<e.length;){if(f=e[l++],f==="\\"&&n!==2){s=n,n=4;continue}switch(n){case 0:f==="/"?(h&&a(),o()):f===":"?(a(),n=1):p();break;case 4:p(),n=s;break;case 1:f==="("?n=2:Gc.test(f)?p():(a(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&l--);break;case 2:f===")"?d[d.length-1]=="\\"?d=d.slice(0,-1)+f:n=3:d+=f;break;case 3:a(),n=0,f!=="*"&&f!=="?"&&f!=="+"&&l--,d="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${h}"`),a(),o(),r}function Jc(e,t,n){const s=Kc(qc(e.path),n),r=se(s,{record:e,parent:t,children:[],alias:[]});return t&&!r.record.aliasOf==!t.record.aliasOf&&t.children.push(r),r}function Yc(e,t){const n=[],s=new Map;t=Qr({strict:!1,end:!0,sensitive:!1},t);function r(a){return s.get(a)}function i(a,p,m){const R=!m,T=Jr(a);T.aliasOf=m&&m.record;const V=Qr(t,a),F=[T];if("alias"in a){const N=typeof a.alias=="string"?[a.alias]:a.alias;for(const $ of N)F.push(Jr(se({},T,{components:m?m.record.components:T.components,path:$,aliasOf:m?m.record:T})))}let M,D;for(const N of F){const{path:$}=N;if(p&&$[0]!=="/"){const K=p.record.path,z=K[K.length-1]==="/"?"":"/";N.path=p.record.path+($&&z+$)}if(M=Jc(N,p,V),m?m.alias.push(M):(D=D||M,D!==M&&D.alias.push(M),R&&a.name&&!Yr(M)&&o(a.name)),Ro(M)&&f(M),T.children){const K=T.children;for(let z=0;z<K.length;z++)i(K[z],M,m&&m.children[z])}m=m||M}return D?()=>{o(D)}:cn}function o(a){if(Eo(a)){const p=s.get(a);p&&(s.delete(a),n.splice(n.indexOf(p),1),p.children.forEach(o),p.alias.forEach(o))}else{const p=n.indexOf(a);p>-1&&(n.splice(p,1),a.record.name&&s.delete(a.record.name),a.children.forEach(o),a.alias.forEach(o))}}function l(){return n}function f(a){const p=Xc(a,n);n.splice(p,0,a),a.record.name&&!Yr(a)&&s.set(a.record.name,a)}function h(a,p){let m,R={},T,V;if("name"in a&&a.name){if(m=s.get(a.name),!m)throw Yt(1,{location:a});V=m.record.name,R=se(qr(p.params,m.keys.filter(D=>!D.optional).concat(m.parent?m.parent.keys.filter(D=>D.optional):[]).map(D=>D.name)),a.params&&qr(a.params,m.keys.map(D=>D.name))),T=m.stringify(R)}else if(a.path!=null)T=a.path,m=n.find(D=>D.re.test(T)),m&&(R=m.parse(T),V=m.record.name);else{if(m=p.name?s.get(p.name):n.find(D=>D.re.test(p.path)),!m)throw Yt(1,{location:a,currentLocation:p});V=m.record.name,R=se({},p.params,a.params),T=m.stringify(R)}const F=[];let M=m;for(;M;)F.unshift(M.record),M=M.parent;return{name:V,path:T,params:R,matched:F,meta:Zc(F)}}e.forEach(a=>i(a));function d(){n.length=0,s.clear()}return{addRoute:i,resolve:h,removeRoute:o,clearRoutes:d,getRoutes:l,getRecordMatcher:r}}function qr(e,t){const n={};for(const s of t)s in e&&(n[s]=e[s]);return n}function Jr(e){const t={path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:e.aliasOf,beforeEnter:e.beforeEnter,props:Qc(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}};return Object.defineProperty(t,"mods",{value:{}}),t}function Qc(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const s in e.components)t[s]=typeof n=="object"?n[s]:n;return t}function Yr(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function Zc(e){return e.reduce((t,n)=>se(t,n.meta),{})}function Qr(e,t){const n={};for(const s in e)n[s]=s in t?t[s]:e[s];return n}function Xc(e,t){let n=0,s=t.length;for(;n!==s;){const i=n+s>>1;Ao(e,t[i])<0?s=i:n=i+1}const r=ea(e);return r&&(s=t.lastIndexOf(r,s-1)),s}function ea(e){let t=e;for(;t=t.parent;)if(Ro(t)&&Ao(e,t)===0)return t}function Ro({record:e}){return!!(e.name||e.components&&Object.keys(e.components).length||e.redirect)}function ta(e){const t={};if(e===""||e==="?")return t;const s=(e[0]==="?"?e.slice(1):e).split("&");for(let r=0;r<s.length;++r){const i=s[r].replace(yo," "),o=i.indexOf("="),l=yn(o<0?i:i.slice(0,o)),f=o<0?null:yn(i.slice(o+1));if(l in t){let h=t[l];Ge(h)||(h=t[l]=[h]),h.push(f)}else t[l]=f}return t}function Zr(e){let t="";for(let n in e){const s=e[n];if(n=xc(n),s==null){s!==void 0&&(t+=(t.length?"&":"")+n);continue}(Ge(s)?s.map(i=>i&&Is(i)):[s&&Is(s)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+n,i!=null&&(t+="="+i))})}return t}function na(e){const t={};for(const n in e){const s=e[n];s!==void 0&&(t[n]=Ge(s)?s.map(r=>r==null?null:""+r):s==null?s:""+s)}return t}const sa=Symbol(""),Xr=Symbol(""),rr=Symbol(""),ir=Symbol(""),$s=Symbol("");function tn(){let e=[];function t(s){return e.push(s),()=>{const r=e.indexOf(s);r>-1&&e.splice(r,1)}}function n(){e=[]}return{add:t,list:()=>e.slice(),reset:n}}function pt(e,t,n,s,r,i=o=>o()){const o=s&&(s.enterCallbacks[r]=s.enterCallbacks[r]||[]);return()=>new Promise((l,f)=>{const h=p=>{p===!1?f(Yt(4,{from:n,to:t})):p instanceof Error?f(p):jc(p)?f(Yt(2,{from:t,to:p})):(o&&s.enterCallbacks[r]===o&&typeof p=="function"&&o.push(p),l())},d=i(()=>e.call(s&&s.instances[r],t,n,h));let a=Promise.resolve(d);e.length<3&&(a=a.then(h)),a.catch(p=>f(p))})}function ps(e,t,n,s,r=i=>i()){const i=[];for(const o of e)for(const l in o.components){let f=o.components[l];if(!(t!=="beforeRouteEnter"&&!o.instances[l]))if(go(f)){const d=(f.__vccOpts||f)[t];d&&i.push(pt(d,n,s,o,l,r))}else{let h=f();i.push(()=>h.then(d=>{if(!d)throw new Error(`Couldn't resolve component "${l}" at "${o.path}"`);const a=ac(d)?d.default:d;o.mods[l]=d,o.components[l]=a;const m=(a.__vccOpts||a)[t];return m&&pt(m,n,s,o,l,r)()}))}}return i}function ei(e){const t=Xe(rr),n=Xe(ir),s=Ve(()=>{const f=Ht(e.to);return t.resolve(f)}),r=Ve(()=>{const{matched:f}=s.value,{length:h}=f,d=f[h-1],a=n.matched;if(!d||!a.length)return-1;const p=a.findIndex(Jt.bind(null,d));if(p>-1)return p;const m=ti(f[h-2]);return h>1&&ti(d)===m&&a[a.length-1].path!==m?a.findIndex(Jt.bind(null,f[h-2])):p}),i=Ve(()=>r.value>-1&&la(n.params,s.value.params)),o=Ve(()=>r.value>-1&&r.value===n.matched.length-1&&xo(n.params,s.value.params));function l(f={}){return oa(f)?t[Ht(e.replace)?"replace":"push"](Ht(e.to)).catch(cn):Promise.resolve()}return{route:s,href:Ve(()=>s.value.href),isActive:i,isExactActive:o,navigate:l}}const ra=wt({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:ei,setup(e,{slots:t}){const n=Wn(ei(e)),{options:s}=Xe(rr),r=Ve(()=>({[ni(e.activeClass,s.linkActiveClass,"router-link-active")]:n.isActive,[ni(e.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const i=t.default&&t.default(n);return e.custom?i:ho("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:r.value},i)}}}),ia=ra;function oa(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function la(e,t){for(const n in t){const s=t[n],r=e[n];if(typeof s=="string"){if(s!==r)return!1}else if(!Ge(r)||r.length!==s.length||s.some((i,o)=>i!==r[o]))return!1}return!0}function ti(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const ni=(e,t,n)=>e??t??n,fa=wt({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){const s=Xe($s),r=Ve(()=>e.route||s.value),i=Xe(Xr,0),o=Ve(()=>{let h=Ht(i);const{matched:d}=r.value;let a;for(;(a=d[h])&&!a.components;)h++;return h}),l=Ve(()=>r.value.matched[o.value]);In(Xr,Ve(()=>o.value+1)),In(sa,l),In($s,r);const f=me();return Mn(()=>[f.value,l.value,e.name],([h,d,a],[p,m,R])=>{d&&(d.instances[a]=h,m&&m!==d&&h&&h===p&&(d.leaveGuards.size||(d.leaveGuards=m.leaveGuards),d.updateGuards.size||(d.updateGuards=m.updateGuards))),h&&d&&(!m||!Jt(d,m)||!p)&&(d.enterCallbacks[a]||[]).forEach(T=>T(h))},{flush:"post"}),()=>{const h=r.value,d=e.name,a=l.value,p=a&&a.components[d];if(!p)return si(n.default,{Component:p,route:h});const m=a.props[d],R=m?m===!0?h.params:typeof m=="function"?m(h):m:null,V=ho(p,se({},R,t,{onVnodeUnmounted:F=>{F.component.isUnmounted&&(a.instances[d]=null)},ref:f}));return si(n.default,{Component:V,route:h})||V}}});function si(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const ca=fa;function aa(e){const t=Yc(e.routes,e),n=e.parseQuery||ta,s=e.stringifyQuery||Zr,r=e.history,i=tn(),o=tn(),l=tn(),f=dl(ut);let h=ut;Bt&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const d=ds.bind(null,v=>""+v),a=ds.bind(null,Ec),p=ds.bind(null,yn);function m(v,I){let P,B;return Eo(v)?(P=t.getRecordMatcher(v),B=I):B=v,t.addRoute(B,P)}function R(v){const I=t.getRecordMatcher(v);I&&t.removeRoute(I)}function T(){return t.getRoutes().map(v=>v.record)}function V(v){return!!t.getRecordMatcher(v)}function F(v,I){if(I=se({},I||f.value),typeof v=="string"){const u=hs(n,v,I.path),g=t.resolve({path:u.path},I),w=r.createHref(u.fullPath);return se(u,g,{params:p(g.params),hash:yn(u.hash),redirectedFrom:void 0,href:w})}let P;if(v.path!=null)P=se({},v,{path:hs(n,v.path,I.path).path});else{const u=se({},v.params);for(const g in u)u[g]==null&&delete u[g];P=se({},v,{params:a(u)}),I.params=a(I.params)}const B=t.resolve(P,I),te=v.hash||"";B.params=d(p(B.params));const ae=Rc(s,se({},v,{hash:wc(te),path:B.path})),c=r.createHref(ae);return se({fullPath:ae,hash:te,query:s===Zr?na(v.query):v.query||{}},B,{redirectedFrom:void 0,href:c})}function M(v){return typeof v=="string"?hs(n,v,f.value.path):se({},v)}function D(v,I){if(h!==v)return Yt(8,{from:I,to:v})}function N(v){return z(v)}function $(v){return N(se(M(v),{replace:!0}))}function K(v){const I=v.matched[v.matched.length-1];if(I&&I.redirect){const{redirect:P}=I;let B=typeof P=="function"?P(v):P;return typeof B=="string"&&(B=B.includes("?")||B.includes("#")?B=M(B):{path:B},B.params={}),se({query:v.query,hash:v.hash,params:B.path!=null?{}:v.params},B)}}function z(v,I){const P=h=F(v),B=f.value,te=v.state,ae=v.force,c=v.replace===!0,u=K(P);if(u)return z(se(M(u),{state:typeof u=="object"?se({},te,u.state):te,force:ae,replace:c}),I||P);const g=P;g.redirectedFrom=I;let w;return!ae&&Cc(s,B,P)&&(w=Yt(16,{to:g,from:B}),qe(B,B,!0,!1)),(w?Promise.resolve(w):le(g,B)).catch(y=>st(y)?st(y,2)?y:ct(y):Q(y,g,B)).then(y=>{if(y){if(st(y,2))return z(se({replace:c},M(y.to),{state:typeof y.to=="object"?se({},te,y.to.state):te,force:ae}),I||g)}else y=be(g,B,!0,c,te);return we(g,B,y),y})}function pe(v,I){const P=D(v,I);return P?Promise.reject(P):Promise.resolve()}function ue(v){const I=It.values().next().value;return I&&typeof I.runWithContext=="function"?I.runWithContext(v):v()}function le(v,I){let P;const[B,te,ae]=ua(v,I);P=ps(B.reverse(),"beforeRouteLeave",v,I);for(const u of B)u.leaveGuards.forEach(g=>{P.push(pt(g,v,I))});const c=pe.bind(null,v,I);return P.push(c),De(P).then(()=>{P=[];for(const u of i.list())P.push(pt(u,v,I));return P.push(c),De(P)}).then(()=>{P=ps(te,"beforeRouteUpdate",v,I);for(const u of te)u.updateGuards.forEach(g=>{P.push(pt(g,v,I))});return P.push(c),De(P)}).then(()=>{P=[];for(const u of ae)if(u.beforeEnter)if(Ge(u.beforeEnter))for(const g of u.beforeEnter)P.push(pt(g,v,I));else P.push(pt(u.beforeEnter,v,I));return P.push(c),De(P)}).then(()=>(v.matched.forEach(u=>u.enterCallbacks={}),P=ps(ae,"beforeRouteEnter",v,I,ue),P.push(c),De(P))).then(()=>{P=[];for(const u of o.list())P.push(pt(u,v,I));return P.push(c),De(P)}).catch(u=>st(u,8)?u:Promise.reject(u))}function we(v,I,P){l.list().forEach(B=>ue(()=>B(v,I,P)))}function be(v,I,P,B,te){const ae=D(v,I);if(ae)return ae;const c=I===ut,u=Bt?history.state:{};P&&(B||c?r.replace(v.fullPath,se({scroll:c&&u&&u.scroll},te)):r.push(v.fullPath,te)),f.value=v,qe(v,I,P,c),ct()}let ye;function Fe(){ye||(ye=r.listen((v,I,P)=>{if(!En.listening)return;const B=F(v),te=K(B);if(te){z(se(te,{replace:!0}),B).catch(cn);return}h=B;const ae=f.value;Bt&&Bc(Vr(ae.fullPath,P.delta),Zn()),le(B,ae).catch(c=>st(c,12)?c:st(c,2)?(z(c.to,B).then(u=>{st(u,20)&&!P.delta&&P.type===bn.pop&&r.go(-1,!1)}).catch(cn),Promise.reject()):(P.delta&&r.go(-P.delta,!1),Q(c,B,ae))).then(c=>{c=c||be(B,ae,!1),c&&(P.delta&&!st(c,8)?r.go(-P.delta,!1):P.type===bn.pop&&st(c,20)&&r.go(-1,!1)),we(B,ae,c)}).catch(cn)}))}let Le=tn(),fe=tn(),J;function Q(v,I,P){ct(v);const B=fe.list();return B.length?B.forEach(te=>te(v,I,P)):console.error(v),Promise.reject(v)}function tt(){return J&&f.value!==ut?Promise.resolve():new Promise((v,I)=>{Le.add([v,I])})}function ct(v){return J||(J=!v,Fe(),Le.list().forEach(([I,P])=>v?P(v):I()),Le.reset()),v}function qe(v,I,P,B){const{scrollBehavior:te}=e;if(!Bt||!te)return Promise.resolve();const ae=!P&&Fc(Vr(v.fullPath,0))||(B||!P)&&history.state&&history.state.scroll||null;return Ni().then(()=>te(v,I,ae)).then(c=>c&&Nc(c)).catch(c=>Q(c,v,I))}const Pe=v=>r.go(v);let Ot;const It=new Set,En={currentRoute:f,listening:!0,addRoute:m,removeRoute:R,clearRoutes:t.clearRoutes,hasRoute:V,getRoutes:T,resolve:F,options:e,push:N,replace:$,go:Pe,back:()=>Pe(-1),forward:()=>Pe(1),beforeEach:i.add,beforeResolve:o.add,afterEach:l.add,onError:fe.add,isReady:tt,install(v){const I=this;v.component("RouterLink",ia),v.component("RouterView",ca),v.config.globalProperties.$router=I,Object.defineProperty(v.config.globalProperties,"$route",{enumerable:!0,get:()=>Ht(f)}),Bt&&!Ot&&f.value===ut&&(Ot=!0,N(r.location).catch(te=>{}));const P={};for(const te in ut)Object.defineProperty(P,te,{get:()=>f.value[te],enumerable:!0});v.provide(rr,I),v.provide(ir,Ti(P)),v.provide($s,f);const B=v.unmount;It.add(v),v.unmount=function(){It.delete(v),It.size<1&&(h=ut,ye&&ye(),ye=null,f.value=ut,Ot=!1,J=!1),B()}}};function De(v){return v.reduce((I,P)=>I.then(()=>ue(P)),Promise.resolve())}return En}function ua(e,t){const n=[],s=[],r=[],i=Math.max(t.matched.length,e.matched.length);for(let o=0;o<i;o++){const l=t.matched[o];l&&(e.matched.find(h=>Jt(h,l))?s.push(l):n.push(l));const f=e.matched[o];f&&(t.matched.find(h=>Jt(h,f))||r.push(f))}return[n,s,r]}function da(e){return Xe(ir)}var ha=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},_n={};Object.defineProperty(_n,"__esModule",{value:!0});_n.stringifiedTypeSerializerClass=void 0;_n.registerSerializableErrorType=pa;const q={number:"number",string:"string",boolean:"boolean",object:"object",bigint:"bigint",NaN:"NaN",Infinity:"Infinity",NegativeInfinity:"-Infinity",DateIso:"DateIso",Buffer64:"Buffer64",ArrayBuffer64:"ArrayBuffer64",RegExp:"RegExp",Map:"Map",Set:"Set",Error:"Error"};class Tt{static parse(t,n="SERIALIZER"){return JSON.parse(t,this.reviver.bind(this,n))}static revive(t,n){if(!t)return t;const s="SERIALIZER",r=this.reviver(s,n,t);if(r!==t)return r instanceof Map?new Map([...r].map(([i,o])=>this.reviver(s,i,o))):r instanceof Set?new Set([...r].map(i=>this.reviver(s,"",i))):r;if(t&&typeof t===q.object){Array.isArray(t)&&(t=t.map(o=>this.revive(o)));const i={};for(const[o,l]of Object.entries(t))i[o]=this.revive(l,o);t=i}return t}static stringify(t,n){const s=Tt.replace(t,n);return JSON.stringify(s,null,n?.format?2:null)}static replace(t,n){if(t==null)return t;const s=this.typeReplacer(null,t,{sortKeys:n?.sortKeys});if(s!==t||typeof s=="object"&&"__type"in s)return s;if(t&&typeof t===q.object){if(Array.isArray(t))return t.map(o=>this.replace(o,n));const r=Object.keys(t);n?.sortKeys&&r.sort();const i={};for(const o of r)n?.ignoreProperties&&n.ignoreProperties.includes(o)||(i[o]=this.replace(t[o],n));return i}return t}static typeReplacer(t,n,s){if(n==null||n===!0||n===!1)return n;if(Number.isNaN(n))return{__type:q.NaN};if(n===Number.POSITIVE_INFINITY)return{__type:q.Infinity};if(n===Number.NEGATIVE_INFINITY)return{__type:q.NegativeInfinity};const r=typeof n;if(r===q.boolean||r===q.string||r===q.number)return n;if(r===q.bigint||n instanceof BigInt)return{__type:q.bigint,value:n.toString()};if(n instanceof Date)return{__type:q.DateIso,value:n.toISOString()};if(n instanceof RegExp)return{__type:q.RegExp,value:[n.source,n.flags]};if(n instanceof Error||r==="object"&&"stack"in n&&"name"in n&&n.name?.endsWith?.("Error")){const{name:i,message:o,stack:l,...f}=n,h=this.replace(f,s);return{__type:q.Error,value:{name:i,message:o,stack:l,...h}}}if(n instanceof Map)return{__type:q.Map,value:[...n.entries()].map(i=>this.replace(i,s))};if(n instanceof Set)return{__type:q.Set,value:[...n].map(i=>this.replace(i,s))};if(this.isNodejs){if(n instanceof Buffer||Buffer.isBuffer(n))return{__type:q.Buffer64,value:n.toString("base64")}}else{if(n instanceof DOMRect)return n.toJSON();if(n instanceof CSSStyleDeclaration){const i=/^\d+$/,o={};for(const l of Object.keys(n))i.test(l)||(o[l]=n[l]);return o}}if(ArrayBuffer.isView(n)){const i=new Uint8Array(n.buffer);return{__type:q.ArrayBuffer64,value:this.Uint8ArrayToBase64String(i),arrayType:n[Symbol.toStringTag]}}if(n instanceof ArrayBuffer){const i=new Uint8Array(n);return{__type:q.ArrayBuffer64,value:this.Uint8ArrayToBase64String(i)}}return r==="object"&&"toJSON"in n?n.toJSON():n}static Uint8ArrayToBase64String(t){const n=Array.from(t).map(s=>String.fromCharCode(s)).join("");return this.isNodejs?Buffer.from(n,"binary").toString("base64"):globalThis.btoa(n)}static base64StringToUint8Array(t){const n=this.isNodejs?Buffer.from(t,"base64").toString("binary"):globalThis.atob(t),s=new Uint8Array(new ArrayBuffer(n.length));for(let r=0;r<n.length;r++)s[r]=n.charCodeAt(r);return s}static reviver(t,n,s){if(!s||!s.__type)return s;const{value:r,__type:i}=s;if(i===q.number||i===q.string||i===q.boolean)return r;if(i===q.bigint)return BigInt(r);if(i===q.NaN)return Number.NaN;if(i===q.Infinity)return Number.POSITIVE_INFINITY;if(i===q.NegativeInfinity)return Number.NEGATIVE_INFINITY;if(i===q.DateIso)return new Date(r);if(i===q.Buffer64||i===q.ArrayBuffer64){const o=this.base64StringToUint8Array(r);return s.arrayType?new globalThis[s.arrayType](o.buffer):this.isNodejs?Buffer.from(o):s}if(i===q.RegExp)return new RegExp(r[0],r[1]);if(i===q.Map)return new Map(r);if(i===q.Set)return new Set(r);if(i===q.Error){const{name:o,message:l,stack:f,...h}=r,d=this.revive(h);let a=this.errorTypes&&this.errorTypes.get(o);a||(this.isNodejs?a=ha[o]||Error:a=globalThis[o]||Error);const p=new Error("").stack.slice(8),m=new a;return m.message=l,m.name=o,Object.assign(m,d),f&&(m.stack=`${f}
${`------${t}`.padEnd(50,"-")}
${p}`),m}return s}}Tt.errorTypes=new Map;Tt.isNodejs=typeof process<"u"&&"release"in process&&process.release?.name==="node";var ri=_n.default=Tt;function pa(e){Tt.errorTypes.set(e.name,e)}_n.stringifiedTypeSerializerClass=`const Types = ${JSON.stringify(q)};
${Tt.toString()}`;class ga{constructor(){Xt(this,"connectedPromise");Xt(this,"connection");Xt(this,"pendingMessagesById",new Map);Xt(this,"messageCounter",0);this.connect=this.connect.bind(this),this.send=this.send.bind(this)}connect(){return this.connectedPromise?this.connectedPromise:(this.connection=new WebSocket("/"),this.connection.onclose=this.onClose.bind(this),this.connection.onmessage=this.onMessage.bind(this),this.connectedPromise=new Promise((t,n)=>{this.connection.onopen=()=>t(),this.connection.onerror=s=>n(s)}),this.connectedPromise)}onClose(){this.connectedPromise=void 0}async send(t,...n){if(!this.connectedPromise)return await new Promise(i=>setTimeout(i,500)),await this.connect(),this.send(t,...n);await this.connectedPromise,this.messageCounter+=1;const s=String(this.messageCounter),r=ri.stringify({command:t,messageId:s,args:n});return new Promise((i,o)=>{this.pendingMessagesById.set(s,{resolve:i,reject:o}),this.connection.send(r)})}onMessage(t){const n=ri.parse(t.data);if("eventType"in n)console.log("event emitted",n);else{const{responseId:s,data:r}=n,i=this.pendingMessagesById.get(s);this.pendingMessagesById.delete(s),i&&(r instanceof Error?i.reject(r):i.resolve(r))}}}const ke=new ga,ma=wt({components:{},setup(){return{}}}),ya={class:"top-0 z-50 w-full border-b border-gray-300 bg-white py-2 px-5 text-sm"},ba={class:"flex w-full flex-row"},va={class:"flex w-full flex-row gap-x-3 divide-x"},wa={class:"pl-3"},xa={class:"pl-3"};function _a(e,t,n,s,r,i){const o=Ct("router-link");return G(),X("div",ya,[b("div",ba,[b("ul",va,[t[3]||(t[3]=b("li",null,[b("b",{class:"whitespace-nowrap"},"Ulixee Databroker")],-1)),t[4]||(t[4]=E()),b("li",null,[de(o,{to:{name:"home"},"active-class":"font-bold"},{default:jt(()=>t[0]||(t[0]=[E("Overview")])),_:1})]),t[5]||(t[5]=E()),b("li",wa,[de(o,{to:{name:"organizations"},"active-class":"font-bold"},{default:jt(()=>t[1]||(t[1]=[E("Organizations")])),_:1})]),t[6]||(t[6]=E()),b("li",xa,[de(o,{to:{name:"whitelist"},"active-class":"font-bold"},{default:jt(()=>t[2]||(t[2]=[E("Whitelist")])),_:1})])])])])}const Xn=Qt(ma,[["render",_a]]),Ea=wt({components:{Navbar:Xn},async setup(){const e=da();return{name:me(""),identity:me(""),grantMicrogons:me(0n),errorMessage:me(""),errorDetails:me([]),organization:me({id:e.params.id,name:"",balance:0n,balanceInChannelHolds:0n}),list:me([])}},created(){this.fetchAll()},methods:{async fetchAll(){this.organization=await ke.send("Organization.get",{organizationId:this.$route.params.id}),this.list=await ke.send("Organization.users",{organizationId:this.$route.params.id})},async add(){try{this.errorMessage="",await ke.send("User.create",{name:this.name,identity:this.identity,organizationId:this.$route.params.id})}catch(e){this.errorMessage=e.message,this.errorDetails=e.errors??[];return}this.name="",this.identity="",await this.fetchAll()},async grant(){try{this.errorMessage="",await ke.send("Organization.grant",{organizationId:this.$route.params.id,amount:this.grantMicrogons})}catch(e){this.errorMessage=e.message,this.errorDetails=e.errors??[];return}this.grantMicrogons=0n,await this.fetchAll()},async remove(e){await ke.send("User.delete",{identity:e}),await this.fetchAll()}}}),Sa={class:"px-20"},Aa={class:"mt-5 text-2xl font-bold mb-4"},Ra={class:"flex flex-row"},Ca={class:"mr-10 my-5 overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5 p-10 bg-white"},Pa={class:"mb-2"},Ta={class:"mb-2"},Oa={key:0,class:"px-1 py-2 text-sm font-semibold text-red-500"},Ia={key:1,class:"list-disc text-small list-inside"},Ma={class:"py-5"},$a={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5 p-10 bg-white"},Na={key:0,class:"px-1 py-2 text-sm font-semibold text-red-500"},Ba={class:"list-disc text-small list-inside"},Fa={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5"},Da={class:"min-w-full max-w-full divide-y divide-gray-300 overflow-hidden"},ka={class:"divide-y divide-gray-200 bg-white"},Ha={key:0,class:"text-sm leading-loose hover:bg-gray-100/50"},La={class:"px-3 py-4 text-sm text-gray-500"},ja={class:"whitespace-nowrap py-4 px-3 font-medium text-sm text-gray-500"},Ua={class:"px-3 py-4 text-sm text-gray-500"},Va=["onClick"];function Ka(e,t,n,s,r,i){const o=Ct("Navbar");return G(),X(ge,null,[de(o),t[26]||(t[26]=E()),b("div",Sa,[b("h1",Aa,`
      Organizations -> `+Y(e.organization.name),1),t[24]||(t[24]=E()),b("div",Ra,[b("div",Ca,[b("div",Pa,[t[5]||(t[5]=b("strong",null,"Balance (microgons):",-1)),E(" "+Y(e.organization.balance)+" available, "+Y(e.organization.balanceInChannelHolds)+` in channelHold
        `,1)]),t[12]||(t[12]=E()),b("div",Ta,[t[10]||(t[10]=b("strong",null,"Grant Additional Funds (microgons):",-1)),t[11]||(t[11]=E()),b("form",{class:"min-w-full max-w-full overflow-hidden",onSubmit:t[1]||(t[1]=Wt((...l)=>e.grant&&e.grant(...l),["prevent"]))},[Ut(b("input",{id:"balance","onUpdate:modelValue":t[0]||(t[0]=l=>e.grantMicrogons=l),class:"shadow appearance-none border rounded w-full my-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",type:"number",placeholder:"Microgons to grant"},null,512),[[zt,e.grantMicrogons]]),t[6]||(t[6]=E()),e.errorMessage?(G(),X("p",Oa,Y(e.errorMessage),1)):Ke("",!0),t[7]||(t[7]=E()),e.errorMessage?(G(),X("ul",Ia,[(G(!0),X(ge,null,At(e.errorDetails,l=>(G(),X("li",{key:l},Y(l),1))),128))])):Ke("",!0),t[8]||(t[8]=E()),t[9]||(t[9]=b("button",{class:"col-span-6 mt-3 inline-flex w-full items-center gap-x-1.5 rounded-md bg-fuchsia-700 py-2.5 px-3.5 text-sm font-semibold text-white shadow-sm hover:bg-fuchsia-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-fuchsia-800"},`
              Grant
            `,-1))],32)])]),t[17]||(t[17]=E()),b("div",Ma,[b("div",$a,[b("form",{class:"min-w-full max-w-full overflow-hidden",onSubmit:t[4]||(t[4]=Wt((...l)=>e.add&&e.add(...l),["prevent"]))},[Ut(b("input",{id:"name","onUpdate:modelValue":t[2]||(t[2]=l=>e.name=l),class:"shadow appearance-none border rounded w-full my-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",type:"text",placeholder:"Name"},null,512),[[zt,e.name]]),t[13]||(t[13]=E()),Ut(b("input",{id:"identity","onUpdate:modelValue":t[3]||(t[3]=l=>e.identity=l),class:"shadow appearance-none border rounded w-full my-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",type:"text",placeholder:"Identity (eg, id1..)"},null,512),[[zt,e.identity]]),t[14]||(t[14]=E()),e.errorMessage?(G(),X("p",Na,[E(Y(e.errorMessage)+" ",1),b("ul",Ba,[(G(!0),X(ge,null,At(e.errorDetails,l=>(G(),X("li",{key:l},Y(l),1))),128))])])):Ke("",!0),t[15]||(t[15]=E()),t[16]||(t[16]=b("button",{class:"col-span-6 mt-3 inline-flex w-full items-center gap-x-1.5 rounded-md bg-fuchsia-700 py-2.5 px-3.5 text-sm font-semibold text-white shadow-sm hover:bg-fuchsia-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-fuchsia-800"},`
              Add
            `,-1))],32)])])]),t[25]||(t[25]=E()),b("div",Fa,[b("table",Da,[t[22]||(t[22]=b("thead",{class:"bg-gray-50"},[b("tr",{class:"top-12 mb-1 bg-fuchsia-800/90 pb-1 text-left font-thin shadow-md"},[b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
              Identity
            `),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
              Name
            `),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
               
            `)])],-1)),t[23]||(t[23]=E()),b("tbody",ka,[e.list.length?Ke("",!0):(G(),X("tr",Ha,t[18]||(t[18]=[b("td",{colspan:"3",class:"whitespace-nowrap py-4 pl-4 pr-3 font-light text-gray-600 sm:pl-6"},`
              No users found
            `,-1)]))),t[21]||(t[21]=E()),(G(!0),X(ge,null,At(e.list,l=>(G(),X("tr",{key:e.list.id,class:"text-sm leading-loose hover:bg-gray-100/50"},[b("td",La,Y(l.identity),1),t[19]||(t[19]=E()),b("td",ja,Y(l.name),1),t[20]||(t[20]=E()),b("td",Ua,[b("a",{class:"text-red-500 cursor-pointer",onClick:Wt(f=>e.remove(l.identity),["prevent"])},"Remove",8,Va)])]))),128))])])])])],64)}const za=Qt(Ea,[["render",Ka]]),un=class un{static parseUnits(t,n){!t.endsWith(this.MicrogonsSymbol)&&!t.endsWith("a")&&(t+=this.MicrogonsSymbol);let s=BigInt(t.substring(0,t.length-1));return n==="microgons"?(t.endsWith("a")&&(s=this.microgonsToArgons(s)),s):t.endsWith(this.MicrogonsSymbol)?this.microgonsToArgons(s):s}static printArgons(t){let n=t;const s=n<0?"-":"";return n<0&&(n*=-1),`${s}${this.ArgonSymbol}${n}`}static format(t,n,s){if(typeof t=="number"&&(t=BigInt(t)),n==="microgons"){if(s==="argons"||t%this.MicrogonsPerArgon===0n){const r=this.microgonsToRoundedArgons(t);return this.printArgons(r)}return`${t}${this.MicrogonsSymbol}`}return s==="microgons"?`${t*this.MicrogonsPerArgon}${this.MicrogonsSymbol}`:this.printArgons(Number(t))}static microgonsToArgons(t){return typeof t=="number"&&(t=BigInt(t)),t/this.MicrogonsPerArgon}static microgonsToRoundedArgons(t){return Math.round(Number(this.microgonsToArgons(t)*1000n))/1e3}};un.ArgonSymbol="₳",un.MicrogonsSymbol="m",un.MicrogonsPerArgon=1000000n;let Ns=un;const Wa=wt({components:{Navbar:Xn},async setup(){return{name:me(""),balance:me(0),errorMessage:me(""),errorDetails:me([]),overview:me({}),list:me([])}},created(){this.fetchAll()},methods:{async fetchAll(){this.overview=await ke.send("System.overview",{}),this.list=await ke.send("Organization.list",{})},async add(){const e=BigInt(this.balance);try{this.errorMessage="",this.errorDetails=[];const{id:t}=await ke.send("Organization.create",{name:this.name,balance:e});this.list.unshift({id:t,name:this.name,balance:e,balanceInChannelHolds:0n}),this.name="",this.balance=0}catch(t){this.errorMessage=t.message,this.errorDetails=t.errors??[]}},toArgons(e){return Ns.format(e,"microgons","argons")}}}),Ga={class:"px-20"},qa={class:"flex flex-row"},Ja={class:"py-5"},Ya={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5 p-10 bg-white"},Qa={key:0,class:"px-1 py-2 text-sm font-semibold text-red-500"},Za={key:1,class:"list-disc text-small list-inside"},Xa={class:"mx-10 my-5 overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5 p-10 bg-white"},eu={class:"mb-2"},tu={class:"mb-2"},nu={class:"mb-2"},su={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5"},ru={class:"min-w-full max-w-full divide-y divide-gray-300 overflow-hidden"},iu={class:"divide-y divide-gray-200 bg-white"},ou={key:0,class:"text-sm leading-loose hover:bg-gray-100/50"},lu={class:"px-3 py-4 text-sm text-gray-500"},fu={class:"whitespace-nowrap py-4 px-3 font-medium text-sm text-gray-500"},cu={class:"px-3 py-4 text-sm font-medium text-gray-500"},au={class:"px-3 py-4 text-sm text-gray-500"},uu={class:"px-3 py-4 text-sm text-gray-500"};function du(e,t,n,s,r,i){const o=Ct("Navbar"),l=Ct("router-link");return G(),X(ge,null,[de(o),t[28]||(t[28]=E()),b("div",Ga,[b("div",qa,[b("div",Ja,[b("div",Ya,[t[10]||(t[10]=b("h4",{class:"text-reg font-bold mb-4"},"Add an organization",-1)),t[11]||(t[11]=E()),b("form",{class:"min-w-full max-w-full overflow-hidden",onSubmit:t[2]||(t[2]=Wt((...f)=>e.add&&e.add(...f),["prevent"]))},[Ut(b("input",{id:"name","onUpdate:modelValue":t[0]||(t[0]=f=>e.name=f),class:"shadow appearance-none border rounded my-2 w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",type:"text",placeholder:"Name"},null,512),[[zt,e.name]]),t[3]||(t[3]=E()),t[4]||(t[4]=b("label",{for:"balance",class:"my-2 block text-reg font-medium leading-6 text-gray-900"},"Microgons to Grant",-1)),t[5]||(t[5]=E()),Ut(b("input",{id:"balance","onUpdate:modelValue":t[1]||(t[1]=f=>e.balance=f),class:"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",type:"number",placeholder:"Microgons to Grant"},null,512),[[zt,e.balance]]),t[6]||(t[6]=E()),e.errorMessage?(G(),X("p",Qa,Y(e.errorMessage),1)):Ke("",!0),t[7]||(t[7]=E()),e.errorMessage?(G(),X("ul",Za,[(G(!0),X(ge,null,At(e.errorDetails,f=>(G(),X("li",{key:f},Y(f),1))),128))])):Ke("",!0),t[8]||(t[8]=E()),t[9]||(t[9]=b("button",{class:"col-span-6 mt-3 inline-flex w-full items-center gap-x-1.5 rounded-md bg-fuchsia-700 py-2.5 px-3.5 text-sm font-semibold text-white shadow-sm hover:bg-fuchsia-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-fuchsia-800"},`
              Add
            `,-1))],32)])]),t[17]||(t[17]=E()),b("div",Xa,[b("div",eu,[t[12]||(t[12]=b("strong",null,"Localchain Balance (microgons):",-1)),E(" "+Y(e.overview.localchainBalance),1)]),t[15]||(t[15]=E()),b("div",tu,[t[13]||(t[13]=b("strong",null,"Available Org Balances:",-1)),E(" "+Y(e.overview.totalOrganizationBalance),1)]),t[16]||(t[16]=E()),b("div",nu,[t[14]||(t[14]=b("strong",null,"Granted Org Balances:",-1)),E(" "+Y(e.overview.grantedBalance),1)])])]),t[27]||(t[27]=E()),b("div",su,[b("table",ru,[t[25]||(t[25]=b("thead",{class:"bg-gray-50"},[b("tr",{class:"top-12 mb-1 bg-fuchsia-800/90 pb-1 text-left font-thin shadow-md"},[b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},"Id"),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},"Name"),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
              Balance
            `),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
              Balance in ChannelHold
            `),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
               
            `)])],-1)),t[26]||(t[26]=E()),b("tbody",iu,[e.list.length?Ke("",!0):(G(),X("tr",ou,t[18]||(t[18]=[b("td",{colspan:"6",class:"whitespace-nowrap py-4 pl-4 pr-3 font-light text-gray-600 sm:pl-6"},`
              No organizations found
            `,-1)]))),t[24]||(t[24]=E()),(G(!0),X(ge,null,At(e.list,f=>(G(),X("tr",{key:e.list.id,class:"text-sm leading-loose hover:bg-gray-100/50"},[b("td",lu,Y(f.id),1),t[20]||(t[20]=E()),b("td",fu,Y(f.name),1),t[21]||(t[21]=E()),b("td",cu,Y(e.toArgons(f.balance)),1),t[22]||(t[22]=E()),b("td",au,Y(e.toArgons(f.balanceInChannelHolds)),1),t[23]||(t[23]=E()),b("td",uu,[de(l,{to:`/organizations/${f.id}`,class:"text-blue-500 hover:text-blue-700"},{default:jt(()=>t[19]||(t[19]=[E(`
                  view
                `)])),_:2},1032,["to"])])]))),128))])])])])],64)}const hu=Qt(Wa,[["render",du]]),pu=wt({components:{Navbar:Xn},async setup(){return{domain:me(""),errorMessage:me(""),errorDetails:me([]),list:me([])}},created(){this.fetchAll()},methods:{async fetchAll(){this.list=await ke.send("WhitelistedDomains.list",{})},async add(){try{this.errorMessage="",this.errorDetails=[],await ke.send("WhitelistedDomains.add",{domain:this.domain}),await this.fetchAll(),this.domain=""}catch(e){this.errorMessage=e.message,this.errorDetails=e.errors??[]}},async remove(e){try{await ke.send("WhitelistedDomains.delete",{domain:e}),await this.fetchAll()}catch(t){this.errorMessage=t.message,this.errorDetails=t.errors??[]}}}}),gu={class:"px-20"},mu={class:"flex flex-row"},yu={class:"py-5"},bu={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5 p-10 bg-white"},vu={key:0,class:"px-1 py-2 text-sm font-semibold text-red-500"},wu={key:1,class:"list-disc text-small list-inside"},xu={class:"overflow-hidden rounded-lg shadow ring-1 ring-black ring-opacity-5"},_u={class:"min-w-full max-w-full divide-y divide-gray-300 overflow-hidden"},Eu={class:"divide-y divide-gray-200 bg-white"},Su={key:0,class:"text-sm leading-loose hover:bg-gray-100/50"},Au={class:"px-3 py-4 text-sm text-gray-500"},Ru={class:"px-3 py-4 text-sm text-gray-500"},Cu=["onClick"];function Pu(e,t,n,s,r,i){const o=Ct("Navbar");return G(),X(ge,null,[de(o),t[14]||(t[14]=E()),b("div",gu,[b("div",mu,[b("div",yu,[b("div",bu,[t[6]||(t[6]=b("h4",{class:"text-reg font-bold mb-4"},"Add",-1)),t[7]||(t[7]=E()),b("form",{onSubmit:t[1]||(t[1]=Wt((...l)=>e.add&&e.add(...l),["prevent"])),class:"min-w-full max-w-full overflow-hidden"},[Ut(b("input",{"onUpdate:modelValue":t[0]||(t[0]=l=>e.domain=l),class:"shadow appearance-none border rounded my-2 w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline",id:"domain",type:"text",placeholder:"Domain"},null,512),[[zt,e.domain]]),t[2]||(t[2]=E()),e.errorMessage?(G(),X("p",vu,Y(e.errorMessage),1)):Ke("",!0),t[3]||(t[3]=E()),e.errorMessage?(G(),X("ul",wu,[(G(!0),X(ge,null,At(e.errorDetails,l=>(G(),X("li",{key:l},Y(l),1))),128))])):Ke("",!0),t[4]||(t[4]=E()),t[5]||(t[5]=b("button",{class:"col-span-6 mt-3 inline-flex w-full items-center gap-x-1.5 rounded-md bg-fuchsia-700 py-2.5 px-3.5 text-sm font-semibold text-white shadow-sm hover:bg-fuchsia-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-fuchsia-800"},`
              Add
            `,-1))],32)])])]),t[13]||(t[13]=E()),b("div",xu,[b("table",_u,[t[11]||(t[11]=b("thead",{class:"bg-gray-50"},[b("tr",{class:"top-12 mb-1 bg-fuchsia-800/90 pb-1 text-left font-thin shadow-md"},[b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white w-[80%]"},`
              Domain
            `),E(),b("th",{scope:"col",class:"px-3 py-3.5 text-left text-sm font-semibold text-white"},`
               
            `)])],-1)),t[12]||(t[12]=E()),b("tbody",Eu,[e.list.length?Ke("",!0):(G(),X("tr",Su,t[8]||(t[8]=[b("td",{colspan:"6",class:"whitespace-nowrap py-4 pl-4 pr-3 font-light text-gray-600 sm:pl-6"},`
              No domains found
            `,-1)]))),t[10]||(t[10]=E()),(G(!0),X(ge,null,At(e.list,l=>(G(),X("tr",{key:l,class:"text-sm leading-loose hover:bg-gray-100/50"},[b("td",Au,Y(l),1),t[9]||(t[9]=E()),b("td",Ru,[b("a",{onClick:Wt(f=>e.remove(l),["prevent"]),class:"text-red-500 cursor-pointer"}," Remove ",8,Cu)])]))),128))])])])])],64)}const Tu=Qt(pu,[["render",Pu]]),Ou=wt({components:{Navbar:Xn},async setup(){return{overview:me({})}},created(){this.fetchOverview()},methods:{async fetchOverview(){this.overview=await ke.send("System.overview",{})}}}),Iu={class:"px-20"},Mu={class:"flex flex-row"},$u={class:"p-6"},Nu={key:0},Bu={class:"mb-2"},Fu={class:"mb-2"},Du={class:"mb-2"},ku={class:"mb-2"},Hu={class:"mb-2"},Lu={class:"mb-2"},ju={class:"mb-2"},Uu={class:"mb-2"},Vu={class:"mb-2"};function Ku(e,t,n,s,r,i){const o=Ct("Navbar");return G(),X(ge,null,[de(o),t[19]||(t[19]=E()),b("div",Iu,[b("div",Mu,[b("div",$u,[t[17]||(t[17]=b("h1",{class:"text-2xl font-bold mb-4"},"System Overview",-1)),t[18]||(t[18]=E()),e.overview?(G(),X("div",Nu,[b("div",Bu,[t[0]||(t[0]=b("strong",null,"Localchain Balance:",-1)),E(" "+Y(e.overview.localchainBalance),1)]),t[9]||(t[9]=E()),b("div",Fu,[t[1]||(t[1]=b("strong",null,"Localchain Address:",-1)),E(" "+Y(e.overview.localchainAddress),1)]),t[10]||(t[10]=E()),b("div",Du,[t[2]||(t[2]=b("strong",null,"Total Organization Balance:",-1)),E(" "+Y(e.overview.totalOrganizationBalance),1)]),t[11]||(t[11]=E()),b("div",ku,[t[3]||(t[3]=b("strong",null,"Granted Balance:",-1)),E(" "+Y(e.overview.grantedBalance),1)]),t[12]||(t[12]=E()),b("div",Hu,[t[4]||(t[4]=b("strong",null,"Organizations:",-1)),E(" "+Y(e.overview.organizations),1)]),t[13]||(t[13]=E()),b("div",Lu,[t[5]||(t[5]=b("strong",null,"Users:",-1)),E(" "+Y(e.overview.users),1)]),t[14]||(t[14]=E()),b("div",ju,[t[6]||(t[6]=b("strong",null,"ChannelHolds:",-1)),E(" "+Y(e.overview.channelHolds),1)]),t[15]||(t[15]=E()),b("div",Uu,[t[7]||(t[7]=b("strong",null,"Open ChannelHolds:",-1)),E(" "+Y(e.overview.openChannelHolds),1)]),t[16]||(t[16]=E()),b("div",Vu,[t[8]||(t[8]=b("strong",null,"Balance Pending ChannelHold Settlement:",-1)),E(" "+Y(e.overview.balancePendingChannelHoldSettlement),1)])])):Ke("",!0)])])])],64)}const ii=Qt(Ou,[["render",Ku]]);var zu={};const Wu=[{name:"home",path:"/",component:ii},{name:"root",path:"",component:ii},{name:"organizations",path:"/organizations",component:hu},{name:"organization",path:"/organizations/:id",component:za},{name:"whitelist",path:"/whitelist",component:Tu}];async function Gu(e,t=1e3,n=100){for(;t>0;){const s=document.querySelector(e);if(s){const i=s.getBoundingClientRect().top+window.scrollY-70;window.scrollTo({top:i,behavior:"auto"});break}await new Promise(r=>setTimeout(r,n)),t-=n}}const qu=aa({scrollBehavior(e,t,n){return e.hash?Gu(e.hash,1e3,100):n||{top:0}},history:Lc(zu.BASE_URL||"/"),routes:[...Wu]}),Co=rc(cc);Co.use(qu);Co.mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
